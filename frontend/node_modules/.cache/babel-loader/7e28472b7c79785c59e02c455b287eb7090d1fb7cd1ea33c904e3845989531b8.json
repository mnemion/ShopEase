{"ast":null,"code":"import apiClient from'./client';// 회원가입 API\nexport const register=async userData=>{const response=await apiClient.post('/users/register/',userData);return response.data;};// 로그인 API\nexport const login=async credentials=>{const response=await apiClient.post('/users/login/',credentials);return response.data;};// 로그아웃 API\nexport const logout=async refreshToken=>{const response=await apiClient.post('/users/logout/',{refresh:refreshToken});return response.data;};// 내 정보 조회 API\nexport const getProfile=async()=>{try{const response=await apiClient.get('/users/users/me/');return response.data;}catch(error){console.error('Failed to fetch profile:',error);throw error;}};// 내 정보 수정 API\nexport const updateProfile=async profileData=>{const response=await apiClient.put('/users/me/',profileData);return response.data;};// 배송지 목록 조회 API\nexport const getAddresses=async()=>{const response=await apiClient.get('/users/addresses/');return response.data;};// 배송지 추가 API\nexport const addAddress=async addressData=>{const response=await apiClient.post('/users/addresses/',addressData);return response.data;};// 배송지 수정 API\nexport const updateAddress=async(id,addressData)=>{const response=await apiClient.put(`/users/addresses/${id}/`,addressData);return response.data;};// 배송지 삭제 API\nexport const deleteAddress=async id=>{const response=await apiClient.delete(`/users/addresses/${id}/`);return response.data;};// 소셜 로그인 URL 얻기\nexport const getSocialLoginUrl=provider=>{// 기본 백엔드 URL에서 /api 제거 확인\nlet BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000/api';// /api로 끝나는 경우 제거\nBASE_URL=BASE_URL.replace(/\\/api\\/?$/,'');// 올바른 URL 생성\nconst url=`${BASE_URL}/accounts/${provider}/login/`;// 디버깅 로그 추가\nconsole.log(`[getSocialLoginUrl] Provider: ${provider}, Generated URL: ${url}`);return url;};// 소셜 로그인을 위한 리다이렉트 (이제 팝업을 선호합니다만, 호환성을 위해 유지)\nexport const redirectToSocialLogin=provider=>{const url=getSocialLoginUrl(provider);console.log(`[redirectToSocialLogin] Redirecting to: ${url}`);window.location.href=url;};// 소셜 로그인을 위한 팝업 열기 (권장 방식)\nexport const openSocialLoginPopup=provider=>{// state 파라미터를 항상 새로 생성\nconst randomState=Math.random().toString(36).substring(2)+Date.now().toString(36);let url=getSocialLoginUrl(provider);// 기존 state 파라미터가 있으면 제거\nurl=url.replace(/([&?])state=[^&]*/,'');// state 파라미터 추가\nurl+=(url.includes('?')?'&':'?')+'state='+randomState;// 디버깅 로그 추가\nconsole.log(`[openSocialLoginPopup] Opening popup for ${provider} with URL: ${url}`);const width=600;const height=700;const left=window.screen.width/2-width/2;const top=window.screen.height/2-height/2;// 팝업 창 이름을 고유하게 설정하여 항상 새 창으로 열리도록 함\nconst popupName=`${provider}Login_${new Date().getTime()}`;// 팝업 창 열기\nconst popup=window.open(url,popupName,`toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=no, copyhistory=no, width=${width}, height=${height}, top=${top}, left=${left}`);// 팝업 창이 열렸는지 확인\nif(!popup||popup.closed||typeof popup.closed==='undefined'){console.error('[openSocialLoginPopup] 팝업이 차단되었습니다. 팝업 차단을 해제해주세요.');alert('팝업이 차단되었습니다. 팝업 차단을 해제한 후 다시 시도해주세요.');return null;}// 팝업 창에 포커스\npopup.focus();// 팝업 창 참조 반환 (필요시)\nreturn popup;};// 소셜 로그인 콜백 데이터로 사용자 정보 업데이트\nexport const handleSocialLoginCallback=async tokenData=>{// tokenData는 { access_token, refresh_token } 형태로 전달됨\nconst{access_token,refresh_token}=tokenData;try{// 로컬 스토리지에 토큰 저장\nlocalStorage.setItem('access_token',access_token);localStorage.setItem('refresh_token',refresh_token);// 토큰을 헤더에 설정\napiClient.defaults.headers.common['Authorization']=`Bearer ${access_token}`;// 사용자 정보 가져오기\nconst user=await getProfile();// 성공적인 로그인 결과 반환\nreturn{access:access_token,refresh:refresh_token,user};}catch(error){console.error('소셜 로그인 콜백 처리 실패:',error);throw error;}};","map":{"version":3,"names":["apiClient","register","userData","response","post","data","login","credentials","logout","refreshToken","refresh","getProfile","get","error","console","updateProfile","profileData","put","getAddresses","addAddress","addressData","updateAddress","id","deleteAddress","delete","getSocialLoginUrl","provider","BASE_URL","process","env","REACT_APP_API_URL","replace","url","log","redirectToSocialLogin","window","location","href","openSocialLoginPopup","randomState","Math","random","toString","substring","Date","now","includes","width","height","left","screen","top","popupName","getTime","popup","open","closed","alert","focus","handleSocialLoginCallback","tokenData","access_token","refresh_token","localStorage","setItem","defaults","headers","common","user","access"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/api/auth.js"],"sourcesContent":["import apiClient from './client';\r\n\r\n// 회원가입 API\r\nexport const register = async (userData) => {\r\n  const response = await apiClient.post('/users/register/', userData);\r\n  return response.data;\r\n};\r\n\r\n// 로그인 API\r\nexport const login = async (credentials) => {\r\n  const response = await apiClient.post('/users/login/', credentials);\r\n  return response.data;\r\n};\r\n\r\n// 로그아웃 API\r\nexport const logout = async (refreshToken) => {\r\n  const response = await apiClient.post('/users/logout/', { refresh: refreshToken });\r\n  return response.data;\r\n};\r\n\r\n// 내 정보 조회 API\r\nexport const getProfile = async () => {\r\n  try {\r\n    const response = await apiClient.get('/users/users/me/');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Failed to fetch profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 내 정보 수정 API\r\nexport const updateProfile = async (profileData) => {\r\n  const response = await apiClient.put('/users/me/', profileData);\r\n  return response.data;\r\n};\r\n\r\n// 배송지 목록 조회 API\r\nexport const getAddresses = async () => {\r\n  const response = await apiClient.get('/users/addresses/');\r\n  return response.data;\r\n};\r\n\r\n// 배송지 추가 API\r\nexport const addAddress = async (addressData) => {\r\n  const response = await apiClient.post('/users/addresses/', addressData);\r\n  return response.data;\r\n};\r\n\r\n// 배송지 수정 API\r\nexport const updateAddress = async (id, addressData) => {\r\n  const response = await apiClient.put(`/users/addresses/${id}/`, addressData);\r\n  return response.data;\r\n};\r\n\r\n// 배송지 삭제 API\r\nexport const deleteAddress = async (id) => {\r\n  const response = await apiClient.delete(`/users/addresses/${id}/`);\r\n  return response.data;\r\n};\r\n\r\n// 소셜 로그인 URL 얻기\r\nexport const getSocialLoginUrl = (provider) => {\r\n  // 기본 백엔드 URL에서 /api 제거 확인\r\n  let BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n  // /api로 끝나는 경우 제거\r\n  BASE_URL = BASE_URL.replace(/\\/api\\/?$/, '');\r\n  \r\n  // 올바른 URL 생성\r\n  const url = `${BASE_URL}/accounts/${provider}/login/`;\r\n  \r\n  // 디버깅 로그 추가\r\n  console.log(`[getSocialLoginUrl] Provider: ${provider}, Generated URL: ${url}`);\r\n  \r\n  return url;\r\n};\r\n\r\n// 소셜 로그인을 위한 리다이렉트 (이제 팝업을 선호합니다만, 호환성을 위해 유지)\r\nexport const redirectToSocialLogin = (provider) => {\r\n  const url = getSocialLoginUrl(provider);\r\n  console.log(`[redirectToSocialLogin] Redirecting to: ${url}`);\r\n  window.location.href = url;\r\n};\r\n\r\n// 소셜 로그인을 위한 팝업 열기 (권장 방식)\r\nexport const openSocialLoginPopup = (provider) => {\r\n  // state 파라미터를 항상 새로 생성\r\n  const randomState = Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n  let url = getSocialLoginUrl(provider);\r\n  // 기존 state 파라미터가 있으면 제거\r\n  url = url.replace(/([&?])state=[^&]*/, '');\r\n  // state 파라미터 추가\r\n  url += (url.includes('?') ? '&' : '?') + 'state=' + randomState;\r\n\r\n  // 디버깅 로그 추가\r\n  console.log(`[openSocialLoginPopup] Opening popup for ${provider} with URL: ${url}`);\r\n\r\n  const width = 600;\r\n  const height = 700;\r\n  const left = window.screen.width / 2 - width / 2;\r\n  const top = window.screen.height / 2 - height / 2;\r\n\r\n  // 팝업 창 이름을 고유하게 설정하여 항상 새 창으로 열리도록 함\r\n  const popupName = `${provider}Login_${new Date().getTime()}`;\r\n\r\n  // 팝업 창 열기\r\n  const popup = window.open(\r\n    url,\r\n    popupName,\r\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=no, copyhistory=no, width=${width}, height=${height}, top=${top}, left=${left}`\r\n  );\r\n\r\n  // 팝업 창이 열렸는지 확인\r\n  if (!popup || popup.closed || typeof popup.closed === 'undefined') {\r\n    console.error('[openSocialLoginPopup] 팝업이 차단되었습니다. 팝업 차단을 해제해주세요.');\r\n    alert('팝업이 차단되었습니다. 팝업 차단을 해제한 후 다시 시도해주세요.');\r\n    return null;\r\n  }\r\n\r\n  // 팝업 창에 포커스\r\n  popup.focus();\r\n\r\n  // 팝업 창 참조 반환 (필요시)\r\n  return popup;\r\n};\r\n\r\n// 소셜 로그인 콜백 데이터로 사용자 정보 업데이트\r\nexport const handleSocialLoginCallback = async (tokenData) => {\r\n  // tokenData는 { access_token, refresh_token } 형태로 전달됨\r\n  const { access_token, refresh_token } = tokenData;\r\n  \r\n  try {\r\n    // 로컬 스토리지에 토큰 저장\r\n    localStorage.setItem('access_token', access_token);\r\n    localStorage.setItem('refresh_token', refresh_token);\r\n    \r\n    // 토큰을 헤더에 설정\r\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n    \r\n    // 사용자 정보 가져오기\r\n    const user = await getProfile();\r\n    \r\n    // 성공적인 로그인 결과 반환\r\n    return {\r\n      access: access_token,\r\n      refresh: refresh_token,\r\n      user\r\n    };\r\n  } catch (error) {\r\n    console.error('소셜 로그인 콜백 처리 실패:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}