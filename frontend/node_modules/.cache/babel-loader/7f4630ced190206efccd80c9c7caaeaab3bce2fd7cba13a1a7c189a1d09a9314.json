{"ast":null,"code":"/**\r\n * 이메일 유효성 검사\r\n * @param {string} email - 검사할 이메일\r\n * @returns {boolean} 유효성 여부\r\n */\nexport const validateEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\r\n * 비밀번호 유효성 검사 (최소 8자, 최소 하나의 문자와 숫자)\r\n * @param {string} password - 검사할 비밀번호\r\n * @returns {boolean} 유효성 여부\r\n */\nexport const validatePassword = password => {\n  // Updated regex to be more lenient and correctly validate passwords\n  // This checks for at least 8 characters with at least one letter and one number\n  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d).{8,}$/;\n  return passwordRegex.test(password);\n};\n\n/**\r\n * 전화번호 유효성 검사 (한국 전화번호 형식)\r\n * @param {string} phone - 검사할 전화번호\r\n * @returns {boolean} 유효성 여부\r\n */\nexport const validatePhone = phone => {\n  // 한국 전화번호 검증 (예: 01012345678 또는 010-1234-5678)\n  const phoneRegex = /^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/;\n  return phoneRegex.test(phone);\n};\n\n/**\r\n * 우편번호 유효성 검사 (한국 우편번호 형식)\r\n * @param {string} zipCode - 검사할 우편번호\r\n * @returns {boolean} 유효성 여부\r\n */\nexport const validateZipCode = zipCode => {\n  // 한국 우편번호 검증 (5자리)\n  const zipCodeRegex = /^\\d{5}$/;\n  return zipCodeRegex.test(zipCode);\n};\n\n/**\r\n * 필수 입력 필드 유효성 검사\r\n * @param {string} value - 검사할 값\r\n * @returns {boolean} 유효성 여부\r\n */\nexport const validateRequired = value => {\n  return value !== null && value !== undefined && value.trim() !== '';\n};\n\n/**\r\n * 숫자 범위 유효성 검사\r\n * @param {number} value - 검사할 값\r\n * @param {number} min - 최소값\r\n * @param {number} max - 최대값\r\n * @returns {boolean} 유효성 여부\r\n */\nexport const validateNumberRange = (value, min, max) => {\n  const num = Number(value);\n  return !isNaN(num) && num >= min && num <= max;\n};\n\n/**\r\n * 폼 필드 유효성 검사 결과 반환\r\n * @param {string} value - 필드 값\r\n * @param {Array} validations - 적용할 유효성 검사 규칙 배열\r\n * @returns {Object} { isValid, error } 형식의 결과 객체\r\n */\nexport const validateField = (value, validations) => {\n  for (const validation of validations) {\n    const {\n      validator,\n      errorMessage\n    } = validation;\n    if (!validator(value)) {\n      return {\n        isValid: false,\n        error: errorMessage\n      };\n    }\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};","map":{"version":3,"names":["validateEmail","email","emailRegex","test","validatePassword","password","passwordRegex","validatePhone","phone","phoneRegex","validateZipCode","zipCode","zipCodeRegex","validateRequired","value","undefined","trim","validateNumberRange","min","max","num","Number","isNaN","validateField","validations","validation","validator","errorMessage","isValid","error"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/utils/validators.js"],"sourcesContent":["/**\r\n * 이메일 유효성 검사\r\n * @param {string} email - 검사할 이메일\r\n * @returns {boolean} 유효성 여부\r\n */\r\nexport const validateEmail = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n  \r\n  /**\r\n   * 비밀번호 유효성 검사 (최소 8자, 최소 하나의 문자와 숫자)\r\n   * @param {string} password - 검사할 비밀번호\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validatePassword = (password) => {\r\n    // Updated regex to be more lenient and correctly validate passwords\r\n    // This checks for at least 8 characters with at least one letter and one number\r\n    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d).{8,}$/;\r\n    return passwordRegex.test(password);\r\n  };\r\n  \r\n  /**\r\n   * 전화번호 유효성 검사 (한국 전화번호 형식)\r\n   * @param {string} phone - 검사할 전화번호\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validatePhone = (phone) => {\r\n    // 한국 전화번호 검증 (예: 01012345678 또는 010-1234-5678)\r\n    const phoneRegex = /^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/;\r\n    return phoneRegex.test(phone);\r\n  };\r\n  \r\n  /**\r\n   * 우편번호 유효성 검사 (한국 우편번호 형식)\r\n   * @param {string} zipCode - 검사할 우편번호\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validateZipCode = (zipCode) => {\r\n    // 한국 우편번호 검증 (5자리)\r\n    const zipCodeRegex = /^\\d{5}$/;\r\n    return zipCodeRegex.test(zipCode);\r\n  };\r\n  \r\n  /**\r\n   * 필수 입력 필드 유효성 검사\r\n   * @param {string} value - 검사할 값\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validateRequired = (value) => {\r\n    return value !== null && value !== undefined && value.trim() !== '';\r\n  };\r\n  \r\n  /**\r\n   * 숫자 범위 유효성 검사\r\n   * @param {number} value - 검사할 값\r\n   * @param {number} min - 최소값\r\n   * @param {number} max - 최대값\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validateNumberRange = (value, min, max) => {\r\n    const num = Number(value);\r\n    return !isNaN(num) && num >= min && num <= max;\r\n  };\r\n  \r\n  /**\r\n   * 폼 필드 유효성 검사 결과 반환\r\n   * @param {string} value - 필드 값\r\n   * @param {Array} validations - 적용할 유효성 검사 규칙 배열\r\n   * @returns {Object} { isValid, error } 형식의 결과 객체\r\n   */\r\n  export const validateField = (value, validations) => {\r\n    for (const validation of validations) {\r\n      const { validator, errorMessage } = validation;\r\n      \r\n      if (!validator(value)) {\r\n        return {\r\n          isValid: false,\r\n          error: errorMessage\r\n        };\r\n      }\r\n    }\r\n    \r\n    return {\r\n      isValid: true,\r\n      error: null\r\n    };\r\n  };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,GAAIC,KAAK,IAAK;EACpC,MAAMC,UAAU,GAAG,4BAA4B;EAC/C,OAAOA,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC;AAC/B,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMG,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C;EACA;EACA,MAAMC,aAAa,GAAG,+BAA+B;EACrD,OAAOA,aAAa,CAACH,IAAI,CAACE,QAAQ,CAAC;AACrC,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAME,aAAa,GAAIC,KAAK,IAAK;EACtC;EACA,MAAMC,UAAU,GAAG,+CAA+C;EAClE,OAAOA,UAAU,CAACN,IAAI,CAACK,KAAK,CAAC;AAC/B,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAME,eAAe,GAAIC,OAAO,IAAK;EAC1C;EACA,MAAMC,YAAY,GAAG,SAAS;EAC9B,OAAOA,YAAY,CAACT,IAAI,CAACQ,OAAO,CAAC;AACnC,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAME,gBAAgB,GAAIC,KAAK,IAAK;EACzC,OAAOA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE;AACrE,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMC,mBAAmB,GAAGA,CAACH,KAAK,EAAEI,GAAG,EAAEC,GAAG,KAAK;EACtD,MAAMC,GAAG,GAAGC,MAAM,CAACP,KAAK,CAAC;EACzB,OAAO,CAACQ,KAAK,CAACF,GAAG,CAAC,IAAIA,GAAG,IAAIF,GAAG,IAAIE,GAAG,IAAID,GAAG;AAChD,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMI,aAAa,GAAGA,CAACT,KAAK,EAAEU,WAAW,KAAK;EACnD,KAAK,MAAMC,UAAU,IAAID,WAAW,EAAE;IACpC,MAAM;MAAEE,SAAS;MAAEC;IAAa,CAAC,GAAGF,UAAU;IAE9C,IAAI,CAACC,SAAS,CAACZ,KAAK,CAAC,EAAE;MACrB,OAAO;QACLc,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEF;MACT,CAAC;IACH;EACF;EAEA,OAAO;IACLC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE;EACT,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}