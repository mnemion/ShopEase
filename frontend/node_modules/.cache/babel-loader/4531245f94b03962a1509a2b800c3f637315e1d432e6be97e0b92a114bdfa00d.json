{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext,useCallback,useRef}from'react';import{getCategories}from'../api/products';import{jsx as _jsx}from\"react/jsx-runtime\";const CategoryContext=/*#__PURE__*/createContext();export const useCategories=()=>useContext(CategoryContext);export const CategoryProvider=_ref=>{let{children}=_ref;const[categories,setCategories]=useState([]);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[isConnected,setIsConnected]=useState(false);const wsRef=useRef(null);const reconnectTimeoutRef=useRef(null);const reconnectAttempts=useRef(0);const maxReconnectAttempts=5;const baseReconnectDelay=3000;// 3초\nconst fetchCategories=useCallback(async()=>{console.log('카테고리 데이터 로딩 시작...');setIsLoading(true);setError(null);try{// 캐시 방지를 위한 타임스탬프 추가\nconst timestamp=new Date().getTime();console.log(`API 호출: /products/categories/?_t=${timestamp}`);const response=await getCategories({_t:timestamp});console.log('API 응답 전체:',JSON.stringify(response));// 응답 형식 검증 강화\nif(!response){throw new Error('API 응답이 비어있습니다');}if(typeof response!=='object'){throw new Error(`API 응답이 객체가 아닙니다: ${typeof response}`);}// REST framework의 일반적인 페이지네이션 응답 형식 확인\nif(!('results'in response)){// results가 없는 경우 전체 응답을 결과로 사용 (API 형식이 다른 경우)\nconsole.log('API 응답에 results 필드가 없습니다. 전체 응답을 사용합니다.');if(Array.isArray(response)){// 응답이 배열인 경우 그대로 사용\nconst activeMainCategories=response.filter(cat=>{if(!cat)return false;// null 체크\nconsole.log(`카테고리 ${cat.id}: ${cat.name} - 활성화: ${cat.is_active}, 부모: ${cat.parent}`);return cat.is_active===true&&!cat.parent;}).sort((a,b)=>(a.order||0)-(b.order||0));console.log('필터링된 카테고리:',activeMainCategories);setCategories(activeMainCategories);// sessionStorage에 저장\ntry{sessionStorage.setItem('categoryData',JSON.stringify(activeMainCategories));sessionStorage.setItem('categoryTimestamp',timestamp.toString());}catch(storageErr){console.warn('세션 스토리지 저장 실패:',storageErr);}return;}else{throw new Error(`예상치 못한 API 응답 형식: ${JSON.stringify(response).substring(0,100)}...`);}}if(!Array.isArray(response.results)){throw new Error(`API 응답의 results가 배열이 아닙니다: ${typeof response.results}`);}// 활성화된 메인 카테고리만 필터링하고, 정렬 순서로 정렬\nconst activeMainCategories=response.results.filter(cat=>{if(!cat)return false;// null 체크\nconsole.log(`카테고리 ${cat.id}: ${cat.name} - 활성화: ${cat.is_active}, 부모: ${cat.parent}`);return cat.is_active===true&&!cat.parent;}).sort((a,b)=>(a.order||0)-(b.order||0));console.log('필터링된 카테고리:',activeMainCategories);// 빈 배열이라도 상태 업데이트 진행 (삭제된 경우 반영)\nsetCategories(activeMainCategories);// sessionStorage에 최신 데이터와 타임스탬프 저장\ntry{sessionStorage.setItem('categoryData',JSON.stringify(activeMainCategories));sessionStorage.setItem('categoryTimestamp',timestamp.toString());console.log('세션 스토리지에 카테고리 데이터 저장됨');}catch(storageErr){console.warn('세션 스토리지 저장 실패:',storageErr);}}catch(err){const errorMessage=`카테고리 로드 실패: ${err.message}`;setError(errorMessage);console.error('카테고리 로드 중 오류 발생:',err);// 오류 발생 시 세션 스토리지의 백업 데이터 사용 시도\ntry{const cachedData=sessionStorage.getItem('categoryData');if(cachedData){console.log('세션 스토리지에서 백업 데이터 복원');setCategories(JSON.parse(cachedData));}}catch(storageErr){console.warn('세션 스토리지 읽기 실패:',storageErr);}}finally{setIsLoading(false);}},[]);// 초기 로드\nuseEffect(()=>{fetchCategories();},[fetchCategories]);// WebSocket 연결 함수\nconst connectWebSocket=useCallback(()=>{// 이미 연결되어 있으면 중복 연결 방지\nif(wsRef.current&&[WebSocket.OPEN,WebSocket.CONNECTING].includes(wsRef.current.readyState)){console.log('WebSocket 이미 연결됨, 중복 연결 방지');return;}// 현재 프로토콜에 맞게 WebSocket 프로토콜 사용 (https -> wss, http -> ws)\nconst protocol=window.location.protocol==='https:'?'wss:':'ws:';const wsUrl=`${protocol}//${window.location.hostname}:8000/ws/category-updates/`;console.log('WebSocket 연결 시도:',wsUrl);try{// 이전 연결 정리\nif(wsRef.current){wsRef.current.close();}// 새 WebSocket 연결 생성\nwsRef.current=new WebSocket(wsUrl);wsRef.current.onopen=()=>{console.log('카테고리 WebSocket 연결됨');setIsConnected(true);reconnectAttempts.current=0;// 연결 성공 시 재시도 카운터 초기화\n// 정기적인 Ping 메시지 전송 설정 (연결 유지 목적)\nconst pingInterval=setInterval(()=>{if(wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify({type:'ping'}));}else{clearInterval(pingInterval);}},30000);// 30초마다 ping\n// 컴포넌트가 언마운트될 때 clearInterval이 실행되도록 wsRef에 저장\nwsRef.current.pingInterval=pingInterval;// 연결 후 즉시 카테고리 데이터 새로고침\nconsole.log('WebSocket 연결 성공 후 카테고리 데이터 갱신 시도');fetchCategories();};wsRef.current.onmessage=event=>{try{const data=JSON.parse(event.data);console.log('카테고리 WebSocket 메시지:',data);if(data.type==='category_update'){const{action,id,name}=data.payload;console.log(`카테고리 변경: ${action}, ID: ${id}, 이름: ${name||'알 수 없음'}`);// 카테고리 즉시 상태 업데이트 (더 효율적인 방식)\nif(action==='delete'){// 삭제된 카테고리를 즉시 제거 (API 호출 없이)\nconsole.log(`ID ${id} 카테고리 즉시 상태에서 제거`);setCategories(prevCategories=>prevCategories.filter(category=>category.id!==id));}else{// 추가/수정 시에는 전체 목록 새로고침\nconsole.log('카테고리 변경 감지로 데이터 갱신 중...');fetchCategories();}}else if(data.type==='connection_established'){console.log('서버에서 연결 확인 메시지 수신:',data.message);// 연결 후 즉시 카테고리 데이터 새로고침\nfetchCategories();}else if(data.type==='pong'){console.log('서버에서 pong 수신');}else if(data.type==='categories_list'){console.log('서버에서 현재 카테고리 목록 수신:',data.categories);if(Array.isArray(data.categories)&&data.categories.length>0){// 서버에서 받은 카테고리 목록으로 완전히 대체 (신뢰할 수 있는 소스)\nconst activeMainCategories=data.categories.filter(cat=>{console.log(`서버 카테고리 ${cat.id}: ${cat.name} - 활성화: ${cat.is_active}`);return cat.is_active&&!cat.parent;}).sort((a,b)=>(a.order||0)-(b.order||0));console.log('서버 데이터로 필터링된 카테고리:',activeMainCategories);// 서버에서 받은 데이터로 항상 상태 갱신\nsetCategories(activeMainCategories);console.log('카테고리 상태 갱신 완료 - 서버 데이터 기준');}}}catch(e){console.error(\"WebSocket 메시지 파싱 실패:\",e);}};wsRef.current.onerror=error=>{var _wsRef$current;console.error('카테고리 WebSocket 오류:',error);console.log('WebSocket 상태:',(_wsRef$current=wsRef.current)===null||_wsRef$current===void 0?void 0:_wsRef$current.readyState);setIsConnected(false);};wsRef.current.onclose=event=>{console.log('카테고리 WebSocket 연결 종료, 코드:',event.code,'이유:',event.reason);setIsConnected(false);// 정기적인 ping 타이머 정리\nif(wsRef.current&&wsRef.current.pingInterval){clearInterval(wsRef.current.pingInterval);}// 비정상적인 종료인 경우 재연결 시도 (1000은 정상 종료)\nif(event.code!==1000&&reconnectAttempts.current<maxReconnectAttempts){const delay=Math.min(baseReconnectDelay*Math.pow(1.5,reconnectAttempts.current),30000);console.log(`${delay}ms 후 WebSocket 재연결 시도... (${reconnectAttempts.current+1}/${maxReconnectAttempts})`);// 이전 타임아웃 정리\nif(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}reconnectAttempts.current+=1;reconnectTimeoutRef.current=setTimeout(()=>{connectWebSocket();// 재연결 시도\n},delay);}};}catch(error){console.error('WebSocket 인스턴스 생성 오류:',error);setIsConnected(false);}},[fetchCategories]);// WebSocket 연결 및 정리\nuseEffect(()=>{// 초기 연결\nconnectWebSocket();// 컴포넌트 언마운트 시 정리\nreturn()=>{// 재연결 타임아웃 정리\nif(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}// 웹소켓 정리\nif(wsRef.current){// 정기적인 ping 타이머 정리\nif(wsRef.current.pingInterval){clearInterval(wsRef.current.pingInterval);}// 연결 종료\nif(wsRef.current.readyState===WebSocket.OPEN){console.log('WebSocket 연결 정리 중...');wsRef.current.close();}}};},[connectWebSocket]);// 로컬 스토리지를 정리하는 함수 추가\nconst clearLocalStorage=useCallback(()=>{try{console.log('캐시 정리 시작...');// 카테고리 관련 로컬 스토리지 항목 삭제\nlocalStorage.removeItem('categories');localStorage.removeItem('categoriesLastFetched');// 세션 스토리지 항목 삭제\nsessionStorage.removeItem('categoryData');sessionStorage.removeItem('categoryTimestamp');// 캐시된 API 응답도 제거하기 위해 캐시 스토리지 정리 시도\nif('caches'in window){caches.keys().then(cacheNames=>{cacheNames.forEach(cacheName=>{if(cacheName.includes('category')||cacheName.includes('api')){caches.delete(cacheName).then(()=>console.log(`캐시 ${cacheName} 삭제됨`)).catch(err=>console.warn(`캐시 ${cacheName} 삭제 실패:`,err));}});}).catch(err=>console.warn('캐시 정리 실패:',err));}console.log('캐시 항목 삭제 완료');// 카테고리 데이터 다시 로드\nconsole.log('카테고리 데이터 새로 로드 중...');setCategories([]);// 먼저 상태 비우기\nfetchCategories();}catch(error){console.error('캐시 정리 중 오류:',error);}},[fetchCategories]);return/*#__PURE__*/_jsx(CategoryContext.Provider,{value:{categories,isLoading,error,fetchCategories,isConnected,reconnect:connectWebSocket,clearLocalStorage},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","useRef","getCategories","jsx","_jsx","CategoryContext","useCategories","CategoryProvider","_ref","children","categories","setCategories","isLoading","setIsLoading","error","setError","isConnected","setIsConnected","wsRef","reconnectTimeoutRef","reconnectAttempts","maxReconnectAttempts","baseReconnectDelay","fetchCategories","console","log","timestamp","Date","getTime","response","_t","JSON","stringify","Error","Array","isArray","activeMainCategories","filter","cat","id","name","is_active","parent","sort","a","b","order","sessionStorage","setItem","toString","storageErr","warn","substring","results","err","errorMessage","message","cachedData","getItem","parse","connectWebSocket","current","WebSocket","OPEN","CONNECTING","includes","readyState","protocol","window","location","wsUrl","hostname","close","onopen","pingInterval","setInterval","send","type","clearInterval","onmessage","event","data","action","payload","prevCategories","category","length","e","onerror","_wsRef$current","onclose","code","reason","delay","Math","min","pow","clearTimeout","setTimeout","clearLocalStorage","localStorage","removeItem","caches","keys","then","cacheNames","forEach","cacheName","delete","catch","Provider","value","reconnect"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/context/CategoryContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';\r\nimport { getCategories } from '../api/products';\r\n\r\nconst CategoryContext = createContext();\r\n\r\nexport const useCategories = () => useContext(CategoryContext);\r\n\r\nexport const CategoryProvider = ({ children }) => {\r\n  const [categories, setCategories] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const wsRef = useRef(null);\r\n  const reconnectTimeoutRef = useRef(null);\r\n  const reconnectAttempts = useRef(0);\r\n  const maxReconnectAttempts = 5;\r\n  const baseReconnectDelay = 3000; // 3초\r\n\r\n  const fetchCategories = useCallback(async () => {\r\n    console.log('카테고리 데이터 로딩 시작...');\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      // 캐시 방지를 위한 타임스탬프 추가\r\n      const timestamp = new Date().getTime();\r\n      console.log(`API 호출: /products/categories/?_t=${timestamp}`);\r\n      const response = await getCategories({ _t: timestamp });\r\n      console.log('API 응답 전체:', JSON.stringify(response));\r\n      \r\n      // 응답 형식 검증 강화\r\n      if (!response) {\r\n        throw new Error('API 응답이 비어있습니다');\r\n      }\r\n      \r\n      if (typeof response !== 'object') {\r\n        throw new Error(`API 응답이 객체가 아닙니다: ${typeof response}`);\r\n      }\r\n      \r\n      // REST framework의 일반적인 페이지네이션 응답 형식 확인\r\n      if (!('results' in response)) {\r\n        // results가 없는 경우 전체 응답을 결과로 사용 (API 형식이 다른 경우)\r\n        console.log('API 응답에 results 필드가 없습니다. 전체 응답을 사용합니다.');\r\n        \r\n        if (Array.isArray(response)) {\r\n          // 응답이 배열인 경우 그대로 사용\r\n          const activeMainCategories = response\r\n            .filter(cat => {\r\n              if (!cat) return false; // null 체크\r\n              console.log(`카테고리 ${cat.id}: ${cat.name} - 활성화: ${cat.is_active}, 부모: ${cat.parent}`);\r\n              return cat.is_active === true && !cat.parent;\r\n            })\r\n            .sort((a, b) => (a.order || 0) - (b.order || 0));\r\n          \r\n          console.log('필터링된 카테고리:', activeMainCategories);\r\n          setCategories(activeMainCategories);\r\n          \r\n          // sessionStorage에 저장\r\n          try {\r\n            sessionStorage.setItem('categoryData', JSON.stringify(activeMainCategories));\r\n            sessionStorage.setItem('categoryTimestamp', timestamp.toString());\r\n          } catch (storageErr) {\r\n            console.warn('세션 스토리지 저장 실패:', storageErr);\r\n          }\r\n          return;\r\n        } else {\r\n          throw new Error(`예상치 못한 API 응답 형식: ${JSON.stringify(response).substring(0, 100)}...`);\r\n        }\r\n      }\r\n      \r\n      if (!Array.isArray(response.results)) {\r\n        throw new Error(`API 응답의 results가 배열이 아닙니다: ${typeof response.results}`);\r\n      }\r\n      \r\n      // 활성화된 메인 카테고리만 필터링하고, 정렬 순서로 정렬\r\n      const activeMainCategories = response.results\r\n        .filter(cat => {\r\n          if (!cat) return false; // null 체크\r\n          console.log(`카테고리 ${cat.id}: ${cat.name} - 활성화: ${cat.is_active}, 부모: ${cat.parent}`);\r\n          return cat.is_active === true && !cat.parent;\r\n        })\r\n        .sort((a, b) => (a.order || 0) - (b.order || 0));\r\n      \r\n      console.log('필터링된 카테고리:', activeMainCategories);\r\n      \r\n      // 빈 배열이라도 상태 업데이트 진행 (삭제된 경우 반영)\r\n      setCategories(activeMainCategories);\r\n      \r\n      // sessionStorage에 최신 데이터와 타임스탬프 저장\r\n      try {\r\n        sessionStorage.setItem('categoryData', JSON.stringify(activeMainCategories));\r\n        sessionStorage.setItem('categoryTimestamp', timestamp.toString());\r\n        console.log('세션 스토리지에 카테고리 데이터 저장됨');\r\n      } catch (storageErr) {\r\n        console.warn('세션 스토리지 저장 실패:', storageErr);\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = `카테고리 로드 실패: ${err.message}`;\r\n      setError(errorMessage);\r\n      console.error('카테고리 로드 중 오류 발생:', err);\r\n      \r\n      // 오류 발생 시 세션 스토리지의 백업 데이터 사용 시도\r\n      try {\r\n        const cachedData = sessionStorage.getItem('categoryData');\r\n        if (cachedData) {\r\n          console.log('세션 스토리지에서 백업 데이터 복원');\r\n          setCategories(JSON.parse(cachedData));\r\n        }\r\n      } catch (storageErr) {\r\n        console.warn('세션 스토리지 읽기 실패:', storageErr);\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // 초기 로드\r\n  useEffect(() => {\r\n    fetchCategories();\r\n  }, [fetchCategories]);\r\n\r\n  // WebSocket 연결 함수\r\n  const connectWebSocket = useCallback(() => {\r\n    // 이미 연결되어 있으면 중복 연결 방지\r\n    if (wsRef.current && [WebSocket.OPEN, WebSocket.CONNECTING].includes(wsRef.current.readyState)) {\r\n      console.log('WebSocket 이미 연결됨, 중복 연결 방지');\r\n      return;\r\n    }\r\n\r\n    // 현재 프로토콜에 맞게 WebSocket 프로토콜 사용 (https -> wss, http -> ws)\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const wsUrl = `${protocol}//${window.location.hostname}:8000/ws/category-updates/`;\r\n    console.log('WebSocket 연결 시도:', wsUrl);\r\n    \r\n    try {\r\n      // 이전 연결 정리\r\n      if (wsRef.current) {\r\n        wsRef.current.close();\r\n      }\r\n      \r\n      // 새 WebSocket 연결 생성\r\n      wsRef.current = new WebSocket(wsUrl);\r\n      \r\n      wsRef.current.onopen = () => {\r\n        console.log('카테고리 WebSocket 연결됨');\r\n        setIsConnected(true);\r\n        reconnectAttempts.current = 0; // 연결 성공 시 재시도 카운터 초기화\r\n        \r\n        // 정기적인 Ping 메시지 전송 설정 (연결 유지 목적)\r\n        const pingInterval = setInterval(() => {\r\n          if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\r\n            wsRef.current.send(JSON.stringify({ type: 'ping' }));\r\n          } else {\r\n            clearInterval(pingInterval);\r\n          }\r\n        }, 30000); // 30초마다 ping\r\n        \r\n        // 컴포넌트가 언마운트될 때 clearInterval이 실행되도록 wsRef에 저장\r\n        wsRef.current.pingInterval = pingInterval;\r\n        \r\n        // 연결 후 즉시 카테고리 데이터 새로고침\r\n        console.log('WebSocket 연결 성공 후 카테고리 데이터 갱신 시도');\r\n        fetchCategories();\r\n      };\r\n\r\n      wsRef.current.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          console.log('카테고리 WebSocket 메시지:', data);\r\n\r\n          if (data.type === 'category_update') {\r\n            const { action, id, name } = data.payload;\r\n            console.log(`카테고리 변경: ${action}, ID: ${id}, 이름: ${name || '알 수 없음'}`);\r\n            \r\n            // 카테고리 즉시 상태 업데이트 (더 효율적인 방식)\r\n            if (action === 'delete') {\r\n              // 삭제된 카테고리를 즉시 제거 (API 호출 없이)\r\n              console.log(`ID ${id} 카테고리 즉시 상태에서 제거`);\r\n              setCategories(prevCategories => \r\n                prevCategories.filter(category => category.id !== id)\r\n              );\r\n            } else {\r\n              // 추가/수정 시에는 전체 목록 새로고침\r\n              console.log('카테고리 변경 감지로 데이터 갱신 중...');\r\n              fetchCategories();\r\n            }\r\n          } else if (data.type === 'connection_established') {\r\n            console.log('서버에서 연결 확인 메시지 수신:', data.message);\r\n            // 연결 후 즉시 카테고리 데이터 새로고침\r\n            fetchCategories();\r\n          } else if (data.type === 'pong') {\r\n            console.log('서버에서 pong 수신');\r\n          } else if (data.type === 'categories_list') {\r\n            console.log('서버에서 현재 카테고리 목록 수신:', data.categories);\r\n            if (Array.isArray(data.categories) && data.categories.length > 0) {\r\n              // 서버에서 받은 카테고리 목록으로 완전히 대체 (신뢰할 수 있는 소스)\r\n              const activeMainCategories = data.categories\r\n                .filter(cat => {\r\n                  console.log(`서버 카테고리 ${cat.id}: ${cat.name} - 활성화: ${cat.is_active}`);\r\n                  return cat.is_active && !cat.parent;\r\n                })\r\n                .sort((a, b) => (a.order || 0) - (b.order || 0));\r\n              \r\n              console.log('서버 데이터로 필터링된 카테고리:', activeMainCategories);\r\n              \r\n              // 서버에서 받은 데이터로 항상 상태 갱신\r\n              setCategories(activeMainCategories);\r\n              console.log('카테고리 상태 갱신 완료 - 서버 데이터 기준');\r\n            }\r\n          }\r\n        } catch (e) {\r\n          console.error(\"WebSocket 메시지 파싱 실패:\", e);\r\n        }\r\n      };\r\n\r\n      wsRef.current.onerror = (error) => {\r\n        console.error('카테고리 WebSocket 오류:', error);\r\n        console.log('WebSocket 상태:', wsRef.current?.readyState);\r\n        setIsConnected(false);\r\n      };\r\n\r\n      wsRef.current.onclose = (event) => {\r\n        console.log('카테고리 WebSocket 연결 종료, 코드:', event.code, '이유:', event.reason);\r\n        setIsConnected(false);\r\n        \r\n        // 정기적인 ping 타이머 정리\r\n        if (wsRef.current && wsRef.current.pingInterval) {\r\n          clearInterval(wsRef.current.pingInterval);\r\n        }\r\n        \r\n        // 비정상적인 종료인 경우 재연결 시도 (1000은 정상 종료)\r\n        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\r\n          const delay = Math.min(baseReconnectDelay * Math.pow(1.5, reconnectAttempts.current), 30000);\r\n          console.log(`${delay}ms 후 WebSocket 재연결 시도... (${reconnectAttempts.current + 1}/${maxReconnectAttempts})`);\r\n          \r\n          // 이전 타임아웃 정리\r\n          if (reconnectTimeoutRef.current) {\r\n            clearTimeout(reconnectTimeoutRef.current);\r\n          }\r\n          \r\n          reconnectAttempts.current += 1;\r\n          reconnectTimeoutRef.current = setTimeout(() => {\r\n            connectWebSocket(); // 재연결 시도\r\n          }, delay);\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('WebSocket 인스턴스 생성 오류:', error);\r\n      setIsConnected(false);\r\n    }\r\n  }, [fetchCategories]);\r\n\r\n  // WebSocket 연결 및 정리\r\n  useEffect(() => {\r\n    // 초기 연결\r\n    connectWebSocket();\r\n    \r\n    // 컴포넌트 언마운트 시 정리\r\n    return () => {\r\n      // 재연결 타임아웃 정리\r\n      if (reconnectTimeoutRef.current) {\r\n        clearTimeout(reconnectTimeoutRef.current);\r\n      }\r\n      \r\n      // 웹소켓 정리\r\n      if (wsRef.current) {\r\n        // 정기적인 ping 타이머 정리\r\n        if (wsRef.current.pingInterval) {\r\n          clearInterval(wsRef.current.pingInterval);\r\n        }\r\n        \r\n        // 연결 종료\r\n        if (wsRef.current.readyState === WebSocket.OPEN) {\r\n          console.log('WebSocket 연결 정리 중...');\r\n          wsRef.current.close();\r\n        }\r\n      }\r\n    };\r\n  }, [connectWebSocket]);\r\n\r\n  // 로컬 스토리지를 정리하는 함수 추가\r\n  const clearLocalStorage = useCallback(() => {\r\n    try {\r\n      console.log('캐시 정리 시작...');\r\n      \r\n      // 카테고리 관련 로컬 스토리지 항목 삭제\r\n      localStorage.removeItem('categories');\r\n      localStorage.removeItem('categoriesLastFetched');\r\n      \r\n      // 세션 스토리지 항목 삭제\r\n      sessionStorage.removeItem('categoryData');\r\n      sessionStorage.removeItem('categoryTimestamp');\r\n      \r\n      // 캐시된 API 응답도 제거하기 위해 캐시 스토리지 정리 시도\r\n      if ('caches' in window) {\r\n        caches.keys().then(cacheNames => {\r\n          cacheNames.forEach(cacheName => {\r\n            if (cacheName.includes('category') || cacheName.includes('api')) {\r\n              caches.delete(cacheName)\r\n                .then(() => console.log(`캐시 ${cacheName} 삭제됨`))\r\n                .catch(err => console.warn(`캐시 ${cacheName} 삭제 실패:`, err));\r\n            }\r\n          });\r\n        }).catch(err => console.warn('캐시 정리 실패:', err));\r\n      }\r\n      \r\n      console.log('캐시 항목 삭제 완료');\r\n      \r\n      // 카테고리 데이터 다시 로드\r\n      console.log('카테고리 데이터 새로 로드 중...');\r\n      setCategories([]); // 먼저 상태 비우기\r\n      fetchCategories();\r\n    } catch (error) {\r\n      console.error('캐시 정리 중 오류:', error);\r\n    }\r\n  }, [fetchCategories]);\r\n\r\n  return (\r\n    <CategoryContext.Provider \r\n      value={{ \r\n        categories, \r\n        isLoading, \r\n        error, \r\n        fetchCategories, \r\n        isConnected, \r\n        reconnect: connectWebSocket,\r\n        clearLocalStorage\r\n      }}\r\n    >\r\n      {children}\r\n    </CategoryContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}