{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './context/AuthContext';\nimport apiClient from './api/client'; // Axios 인스턴스 import\nimport { getProfile } from './api/auth';\nimport { toast } from 'react-toastify';\n\n/**\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\n */\nconst SocialLoginHandler = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  const navigate = useNavigate();\n\n  // 디버깅 함수\n  const debug = message => {\n    console.log(\"[SocialLoginHandler]\", message);\n  };\n\n  // 로컬 스토리지에서 토큰 처리\n  const processLocalStorageTokens = useCallback(async () => {\n    debug(\"로컬 스토리지에서 토큰 확인\");\n    const access_token = localStorage.getItem('access_token');\n    const refresh_token = localStorage.getItem('refresh_token');\n    if (!access_token || !refresh_token) {\n      debug(\"로컬 스토리지에 토큰이 없음\");\n      return false;\n    }\n    debug(`로컬 스토리지에서 토큰 발견: ${access_token.substring(0, 10)}...`);\n    try {\n      // API 클라이언트 인증 헤더 설정\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      debug(\"인증 헤더 설정 완료\");\n\n      // 사용자 프로필 정보 가져오기\n      debug(\"사용자 프로필 요청 시작...\");\n      const userData = await getProfile();\n      debug(\"사용자 프로필 수신 성공:\", userData);\n\n      // 인증 컨텍스트 업데이트\n      login(access_token, refresh_token, userData);\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n\n      // 성공 메시지 표시\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`);\n\n      // 홈 페이지로 리다이렉트\n      navigate('/', {\n        replace: true\n      });\n\n      // 소셜 로그인 성공 이벤트 발생\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', {\n        detail: {\n          success: true,\n          provider: userData.email ? userData.email.split('@')[1] : 'unknown'\n        }\n      }));\n\n      // 토큰 처리 완료 후 로컬 스토리지에서 삭제 (선택 사항)\n      // localStorage.removeItem('access_token');\n      // localStorage.removeItem('refresh_token');\n\n      return true;\n    } catch (error) {\n      console.error('로컬 스토리지 토큰 처리 중 오류:', error);\n      if (error.response) {\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data || {})}`);\n      }\n\n      // 토큰이 유효하지 않은 경우 제거\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      delete apiClient.defaults.headers.common['Authorization'];\n      return false;\n    }\n  }, [login, navigate]);\n\n  // useCallback으로 함수 메모이제이션\n  const handleMessage = useCallback(async event => {\n    var _event$data, _event$data2;\n    debug(\"메시지 이벤트 수신: \" + JSON.stringify(event.origin));\n\n    // 1) HMR 메시지 무시\n    if (((_event$data = event.data) === null || _event$data === void 0 ? void 0 : _event$data.type) === 'webpackOk') {\n      debug(\"HMR 메시지 무시\");\n      return;\n    }\n\n    // 세부 이벤트 데이터 로깅 (민감 정보 제외)\n    const eventDataType = ((_event$data2 = event.data) === null || _event$data2 === void 0 ? void 0 : _event$data2.type) || 'no-type';\n    debug(`이벤트 데이터 타입: ${eventDataType}`);\n\n    // 2) 출처 확인\n    if (event.origin !== 'http://localhost:8000') {\n      debug(`허용되지 않은 오리진: ${event.origin}`);\n      return;\n    }\n    // 3) 메시지 타입 확인\n    const {\n      type,\n      access_token,\n      refresh_token\n    } = event.data || {};\n    if (type !== 'social-login-success') {\n      debug(`지원되지 않는 메시지 타입: ${type}`);\n      return;\n    }\n    debug(\"소셜 로그인 성공 메시지를 처리합니다\");\n\n    // 토큰 유효성 검사\n    if (!access_token || !refresh_token) {\n      debug(\"토큰 정보가 누락되었습니다\");\n      toast.error(\"로그인 정보가 유효하지 않습니다\");\n      return;\n    }\n    debug(`토큰 정보 확인됨: ${access_token.substring(0, 10)}...`);\n    try {\n      // 1. 로컬 스토리지에 토큰 저장\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n      debug(\"토큰이 로컬 스토리지에 저장됨\");\n\n      // 2. API 클라이언트 인증 헤더 설정\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      debug(\"인증 헤더 설정 완료\");\n\n      // 3. 사용자 프로필 정보 가져오기\n      debug(\"사용자 프로필 요청 시작...\");\n      const userData = await getProfile();\n      debug(\"사용자 프로필 수신 성공:\", userData);\n\n      // 4. 인증 컨텍스트 업데이트\n      login(access_token, refresh_token, userData);\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n\n      // 5. 성공 메시지 표시\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`, {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n\n      // 6. 홈 페이지로 리다이렉트\n      debug(\"홈 페이지로 이동합니다\");\n      navigate('/', {\n        replace: true\n      });\n\n      // 7. 소셜 로그인 성공 이벤트 발생 (옵션)\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', {\n        detail: {\n          success: true,\n          provider: userData.email ? userData.email.split('@')[1] : 'unknown'\n        }\n      }));\n    } catch (error) {\n      console.error('소셜 로그인 처리 중 오류:', error);\n      debug(`오류 세부 정보: ${error.message}`);\n      if (error.response) {\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data || {})}`);\n      }\n      toast.error('로그인 처리 중 오류가 발생했습니다');\n\n      // 오류 발생 시 토큰 삭제\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      delete apiClient.defaults.headers.common['Authorization'];\n      navigate('/login');\n    }\n  }, [login, navigate]);\n\n  // 이벤트 리스너 등록 및 제거 (StrictMode 중복 방지)\n  const listenerRegistered = useRef(false);\n  useEffect(() => {\n    debug(\"컴포넌트 마운트\");\n\n    // 로컬 스토리지에서 토큰 확인\n    processLocalStorageTokens().then(success => {\n      debug(`로컬 스토리지 토큰 처리 ${success ? '성공' : '실패 또는 토큰 없음'}`);\n    });\n    if (!listenerRegistered.current) {\n      debug(\"메시지 이벤트 리스너 등록\");\n      window.addEventListener('message', handleMessage);\n      listenerRegistered.current = true;\n    }\n    return () => {\n      if (listenerRegistered.current) {\n        debug(\"메시지 이벤트 리스너 제거\");\n        window.removeEventListener('message', handleMessage);\n        listenerRegistered.current = false;\n      }\n    };\n  }, [handleMessage, processLocalStorageTokens]);\n  return null; // UI 렌더링 없음\n};\n_s(SocialLoginHandler, \"qUFx7WBe2ekK9ZhKqqCqcVRNMlg=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = SocialLoginHandler;\nexport default SocialLoginHandler;\nvar _c;\n$RefreshReg$(_c, \"SocialLoginHandler\");","map":{"version":3,"names":["useEffect","useCallback","useRef","useNavigate","useAuth","apiClient","getProfile","toast","SocialLoginHandler","_s","login","navigate","debug","message","console","log","processLocalStorageTokens","access_token","localStorage","getItem","refresh_token","substring","defaults","headers","common","userData","success","name","email","replace","window","dispatchEvent","CustomEvent","detail","provider","split","error","response","status","JSON","stringify","data","removeItem","handleMessage","event","_event$data","_event$data2","origin","type","eventDataType","setItem","position","autoClose","listenerRegistered","then","current","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/SocialLoginHandler.js"],"sourcesContent":["import { useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './context/AuthContext';\nimport apiClient from './api/client'; // Axios 인스턴스 import\nimport { getProfile } from './api/auth';\nimport { toast } from 'react-toastify';\n\n/**\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\n */\nconst SocialLoginHandler = () => {\n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  // 디버깅 함수\n  const debug = (message) => {\n    console.log(\"[SocialLoginHandler]\", message);\n  };\n\n  // 로컬 스토리지에서 토큰 처리\n  const processLocalStorageTokens = useCallback(async () => {\n    debug(\"로컬 스토리지에서 토큰 확인\");\n    const access_token = localStorage.getItem('access_token');\n    const refresh_token = localStorage.getItem('refresh_token');\n\n    if (!access_token || !refresh_token) {\n      debug(\"로컬 스토리지에 토큰이 없음\");\n      return false;\n    }\n\n    debug(`로컬 스토리지에서 토큰 발견: ${access_token.substring(0, 10)}...`);\n    \n    try {\n      // API 클라이언트 인증 헤더 설정\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      debug(\"인증 헤더 설정 완료\");\n      \n      // 사용자 프로필 정보 가져오기\n      debug(\"사용자 프로필 요청 시작...\");\n      const userData = await getProfile();\n      debug(\"사용자 프로필 수신 성공:\", userData);\n      \n      // 인증 컨텍스트 업데이트\n      login(access_token, refresh_token, userData);\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n      \n      // 성공 메시지 표시\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`);\n      \n      // 홈 페이지로 리다이렉트\n      navigate('/', { replace: true });\n      \n      // 소셜 로그인 성공 이벤트 발생\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', { \n        detail: { success: true, provider: userData.email ? userData.email.split('@')[1] : 'unknown' } \n      }));\n      \n      // 토큰 처리 완료 후 로컬 스토리지에서 삭제 (선택 사항)\n      // localStorage.removeItem('access_token');\n      // localStorage.removeItem('refresh_token');\n      \n      return true;\n    } catch (error) {\n      console.error('로컬 스토리지 토큰 처리 중 오류:', error);\n      \n      if (error.response) {\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data || {})}`);\n      }\n      \n      // 토큰이 유효하지 않은 경우 제거\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      delete apiClient.defaults.headers.common['Authorization'];\n      \n      return false;\n    }\n  }, [login, navigate]);\n\n  // useCallback으로 함수 메모이제이션\n  const handleMessage = useCallback(async (event) => {\n    debug(\"메시지 이벤트 수신: \" + JSON.stringify(event.origin));\n    \n    // 1) HMR 메시지 무시\n    if (event.data?.type === 'webpackOk') {\n      debug(\"HMR 메시지 무시\");\n      return;\n    }\n    \n    // 세부 이벤트 데이터 로깅 (민감 정보 제외)\n    const eventDataType = event.data?.type || 'no-type';\n    debug(`이벤트 데이터 타입: ${eventDataType}`);\n    \n    // 2) 출처 확인\n    if (event.origin !== 'http://localhost:8000') {\n      debug(`허용되지 않은 오리진: ${event.origin}`);\n      return;\n    }\n    // 3) 메시지 타입 확인\n    const { type, access_token, refresh_token } = event.data || {};\n    if (type !== 'social-login-success') {\n      debug(`지원되지 않는 메시지 타입: ${type}`);\n      return;\n    }\n    debug(\"소셜 로그인 성공 메시지를 처리합니다\");\n    \n    // 토큰 유효성 검사\n    if (!access_token || !refresh_token) {\n      debug(\"토큰 정보가 누락되었습니다\");\n      toast.error(\"로그인 정보가 유효하지 않습니다\");\n      return;\n    }\n\n    debug(`토큰 정보 확인됨: ${access_token.substring(0, 10)}...`);\n    \n    try {\n      // 1. 로컬 스토리지에 토큰 저장\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n      debug(\"토큰이 로컬 스토리지에 저장됨\");\n      \n      // 2. API 클라이언트 인증 헤더 설정\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      debug(\"인증 헤더 설정 완료\");\n      \n      // 3. 사용자 프로필 정보 가져오기\n      debug(\"사용자 프로필 요청 시작...\");\n      const userData = await getProfile();\n      debug(\"사용자 프로필 수신 성공:\", userData);\n      \n      // 4. 인증 컨텍스트 업데이트\n      login(access_token, refresh_token, userData);\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n      \n      // 5. 성공 메시지 표시\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`, {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n      \n      // 6. 홈 페이지로 리다이렉트\n      debug(\"홈 페이지로 이동합니다\");\n      navigate('/', { replace: true });\n      \n      // 7. 소셜 로그인 성공 이벤트 발생 (옵션)\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', { \n        detail: { success: true, provider: userData.email ? userData.email.split('@')[1] : 'unknown' } \n      }));\n      \n    } catch (error) {\n      console.error('소셜 로그인 처리 중 오류:', error);\n      debug(`오류 세부 정보: ${error.message}`);\n      \n      if (error.response) {\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data || {})}`);\n      }\n      \n      toast.error('로그인 처리 중 오류가 발생했습니다');\n      \n      // 오류 발생 시 토큰 삭제\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      delete apiClient.defaults.headers.common['Authorization'];\n      \n      navigate('/login');\n    }\n  }, [login, navigate]);\n\n  // 이벤트 리스너 등록 및 제거 (StrictMode 중복 방지)\n  const listenerRegistered = useRef(false);\n  useEffect(() => {\n    debug(\"컴포넌트 마운트\");\n    \n    // 로컬 스토리지에서 토큰 확인\n    processLocalStorageTokens()\n      .then(success => {\n        debug(`로컬 스토리지 토큰 처리 ${success ? '성공' : '실패 또는 토큰 없음'}`);\n      });\n    \n    if (!listenerRegistered.current) {\n      debug(\"메시지 이벤트 리스너 등록\");\n      window.addEventListener('message', handleMessage);\n      listenerRegistered.current = true;\n    }\n    \n    return () => {\n      if (listenerRegistered.current) {\n        debug(\"메시지 이벤트 리스너 제거\");\n        window.removeEventListener('message', handleMessage);\n        listenerRegistered.current = false;\n      }\n    };\n  }, [handleMessage, processLocalStorageTokens]);\n\n  return null; // UI 렌더링 없음\n};\n\nexport default SocialLoginHandler;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}