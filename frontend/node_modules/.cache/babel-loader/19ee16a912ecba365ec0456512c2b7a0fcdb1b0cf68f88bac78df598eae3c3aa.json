{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\COM-LM\\\\Documents\\\\ShopEase\\\\frontend\\\\src\\\\pages\\\\SocialLoginCallback.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { handleSocialLoginCallback } from '../api/auth';\nimport { toast } from 'react-toastify';\nimport Loading from '../components/ui/Loading';\n\n/**\r\n * 소셜 로그인 콜백 처리 컴포넌트\r\n * URL 파라미터로 전달된 토큰을 처리 (팝업 방식이 실패할 경우 대체 방안)\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocialLoginCallback = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // 디버깅 로그 함수\n  const debug = message => {\n    console.log(\"[SocialLoginCallback]\", message);\n  };\n  useEffect(() => {\n    debug(\"컴포넌트 마운트\");\n    debug(`현재 URL: ${location.pathname}${location.search}`);\n    const processTokens = async () => {\n      try {\n        var _result$user;\n        // URL 쿼리 파라미터에서 토큰 추출\n        const searchParams = new URLSearchParams(location.search);\n        const access_token = searchParams.get('access_token');\n        const refresh_token = searchParams.get('refresh_token');\n        debug(`토큰 존재 여부 - 액세스: ${Boolean(access_token)}, 리프레시: ${Boolean(refresh_token)}`);\n        if (!access_token || !refresh_token) {\n          debug(\"토큰 정보 누락\");\n          toast.error('로그인 정보가 올바르지 않습니다.');\n          navigate('/login', {\n            replace: true\n          });\n          return;\n        }\n\n        // 로컬 스토리지 확인\n        const storedAccessToken = localStorage.getItem('access_token');\n        const storedRefreshToken = localStorage.getItem('refresh_token');\n        debug(`로컬 스토리지 토큰 존재 여부 - 액세스: ${Boolean(storedAccessToken)}, 리프레시: ${Boolean(storedRefreshToken)}`);\n\n        // URL의 토큰 또는 로컬 스토리지의 토큰 사용\n        const finalAccessToken = access_token || storedAccessToken;\n        const finalRefreshToken = refresh_token || storedRefreshToken;\n        if (!finalAccessToken || !finalRefreshToken) {\n          debug(\"URL 및 로컬 스토리지 모두에서 토큰을 찾을 수 없음\");\n          toast.error('로그인 정보를 찾을 수 없습니다.');\n          navigate('/login', {\n            replace: true\n          });\n          return;\n        }\n        debug(\"토큰으로 사용자 정보 요청 시작\");\n        // 토큰으로 사용자 정보 처리\n        const result = await handleSocialLoginCallback({\n          access_token: finalAccessToken,\n          refresh_token: finalRefreshToken\n        });\n        debug(`사용자 정보 수신 성공: ${((_result$user = result.user) === null || _result$user === void 0 ? void 0 : _result$user.email) || '이메일 없음'}`);\n\n        // 로그인 상태 업데이트\n        login(result.access, result.refresh, result.user);\n        debug(\"로그인 상태 업데이트 완료\");\n\n        // 성공 메시지\n        toast.success('소셜 로그인에 성공했습니다!');\n\n        // 홈으로 리다이렉트\n        debug(\"홈으로 리다이렉트\");\n        navigate('/', {\n          replace: true\n        });\n      } catch (error) {\n        console.error('소셜 로그인 콜백 처리 중 오류:', error);\n        debug(`오류 세부 정보: ${error.message}`);\n        if (error.response) {\n          debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data || {})}`);\n        }\n        toast.error('소셜 로그인 처리 중 오류가 발생했습니다.');\n        navigate('/login', {\n          replace: true\n        });\n      }\n    };\n    processTokens();\n  }, [location, login, navigate]);\n\n  // 처리 중 로딩 표시\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 text-lg text-gray-600\",\n      children: \"\\uC18C\\uC15C \\uB85C\\uADF8\\uC778 \\uCC98\\uB9AC \\uC911\\uC785\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n      className: \"text-gray-400 mt-2\",\n      children: [\"URL: \", location.pathname, location.search]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(SocialLoginCallback, \"i5QvZTln2+NeKozofzY8DTOLQ9I=\", false, function () {\n  return [useAuth, useNavigate, useLocation];\n});\n_c = SocialLoginCallback;\nexport default SocialLoginCallback;\nvar _c;\n$RefreshReg$(_c, \"SocialLoginCallback\");","map":{"version":3,"names":["React","useEffect","useNavigate","useLocation","useAuth","handleSocialLoginCallback","toast","Loading","jsxDEV","_jsxDEV","SocialLoginCallback","_s","login","navigate","location","debug","message","console","log","pathname","search","processTokens","_result$user","searchParams","URLSearchParams","access_token","get","refresh_token","Boolean","error","replace","storedAccessToken","localStorage","getItem","storedRefreshToken","finalAccessToken","finalRefreshToken","result","user","email","access","refresh","success","response","status","JSON","stringify","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/pages/SocialLoginCallback.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { handleSocialLoginCallback } from '../api/auth';\r\nimport { toast } from 'react-toastify';\r\nimport Loading from '../components/ui/Loading';\r\n\r\n/**\r\n * 소셜 로그인 콜백 처리 컴포넌트\r\n * URL 파라미터로 전달된 토큰을 처리 (팝업 방식이 실패할 경우 대체 방안)\r\n */\r\nconst SocialLoginCallback = () => {\r\n  const { login } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // 디버깅 로그 함수\r\n  const debug = (message) => {\r\n    console.log(\"[SocialLoginCallback]\", message);\r\n  };\r\n\r\n  useEffect(() => {\r\n    debug(\"컴포넌트 마운트\");\r\n    debug(`현재 URL: ${location.pathname}${location.search}`);\r\n\r\n    const processTokens = async () => {\r\n      try {\r\n        // URL 쿼리 파라미터에서 토큰 추출\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const access_token = searchParams.get('access_token');\r\n        const refresh_token = searchParams.get('refresh_token');\r\n\r\n        debug(`토큰 존재 여부 - 액세스: ${Boolean(access_token)}, 리프레시: ${Boolean(refresh_token)}`);\r\n\r\n        if (!access_token || !refresh_token) {\r\n          debug(\"토큰 정보 누락\");\r\n          toast.error('로그인 정보가 올바르지 않습니다.');\r\n          navigate('/login', { replace: true });\r\n          return;\r\n        }\r\n\r\n        // 로컬 스토리지 확인\r\n        const storedAccessToken = localStorage.getItem('access_token');\r\n        const storedRefreshToken = localStorage.getItem('refresh_token');\r\n        \r\n        debug(`로컬 스토리지 토큰 존재 여부 - 액세스: ${Boolean(storedAccessToken)}, 리프레시: ${Boolean(storedRefreshToken)}`);\r\n\r\n        // URL의 토큰 또는 로컬 스토리지의 토큰 사용\r\n        const finalAccessToken = access_token || storedAccessToken;\r\n        const finalRefreshToken = refresh_token || storedRefreshToken;\r\n\r\n        if (!finalAccessToken || !finalRefreshToken) {\r\n          debug(\"URL 및 로컬 스토리지 모두에서 토큰을 찾을 수 없음\");\r\n          toast.error('로그인 정보를 찾을 수 없습니다.');\r\n          navigate('/login', { replace: true });\r\n          return;\r\n        }\r\n\r\n        debug(\"토큰으로 사용자 정보 요청 시작\");\r\n        // 토큰으로 사용자 정보 처리\r\n        const result = await handleSocialLoginCallback({\r\n          access_token: finalAccessToken,\r\n          refresh_token: finalRefreshToken\r\n        });\r\n\r\n        debug(`사용자 정보 수신 성공: ${result.user?.email || '이메일 없음'}`);\r\n        \r\n        // 로그인 상태 업데이트\r\n        login(result.access, result.refresh, result.user);\r\n        debug(\"로그인 상태 업데이트 완료\");\r\n        \r\n        // 성공 메시지\r\n        toast.success('소셜 로그인에 성공했습니다!');\r\n        \r\n        // 홈으로 리다이렉트\r\n        debug(\"홈으로 리다이렉트\");\r\n        navigate('/', { replace: true });\r\n      } catch (error) {\r\n        console.error('소셜 로그인 콜백 처리 중 오류:', error);\r\n        debug(`오류 세부 정보: ${error.message}`);\r\n        \r\n        if (error.response) {\r\n          debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data || {})}`);\r\n        }\r\n        \r\n        toast.error('소셜 로그인 처리 중 오류가 발생했습니다.');\r\n        navigate('/login', { replace: true });\r\n      }\r\n    };\r\n\r\n    processTokens();\r\n  }, [location, login, navigate]);\r\n\r\n  // 처리 중 로딩 표시\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center h-screen\">\r\n      <Loading />\r\n      <p className=\"mt-4 text-lg text-gray-600\">소셜 로그인 처리 중입니다...</p>\r\n      <small className=\"text-gray-400 mt-2\">URL: {location.pathname}{location.search}</small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SocialLoginCallback;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}