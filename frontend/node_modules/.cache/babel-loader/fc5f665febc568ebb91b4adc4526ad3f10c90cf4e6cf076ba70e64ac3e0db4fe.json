{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\COM-LM\\\\Documents\\\\ShopEase\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { getCartItems, getCartSummary, addToCart, updateCartItem, removeFromCart, clearCart } from '../api/cart';\nimport { useAuth } from './AuthContext';\nimport { toast } from 'react-toastify';\n\n// 장바구니 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [totalItems, setTotalItems] = useState(0);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    isAuthenticated\n  } = useAuth();\n\n  // 장바구니 정보 로드 (useCallback 적용)\n  const loadCart = useCallback(async () => {\n    if (!isAuthenticated) return;\n    setIsLoading(true);\n    try {\n      // 장바구니 아이템 가져오기\n      const items = await getCartItems();\n      setCartItems(items.results || []);\n\n      // 장바구니 요약 정보 가져오기\n      const summary = await getCartSummary();\n      setTotalItems(summary.total_items);\n      setTotalPrice(summary.total_price);\n    } catch (error) {\n      console.error('장바구니 로드 실패:', error);\n      toast.error('장바구니 정보를 불러오는데 실패했습니다.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isAuthenticated]);\n\n  // 장바구니에 상품 추가 (useCallback 적용)\n  const addItemToCart = useCallback(async (productId, quantity = 1) => {\n    if (!isAuthenticated) {\n      toast.warning('로그인이 필요합니다.');\n      return false;\n    }\n    setIsLoading(true);\n    try {\n      await addToCart(productId, quantity);\n      toast.success('상품이 장바구니에 추가되었습니다.');\n      await loadCart();\n      return true;\n    } catch (error) {\n      console.error('장바구니 추가 실패:', error);\n      if (error.response && error.response.data) {\n        // 서버 오류 메시지 표시\n        const message = error.response.data.quantity || error.response.data.detail || '장바구니에 추가하지 못했습니다.';\n        toast.error(message);\n      } else {\n        toast.error('장바구니에 추가하지 못했습니다.');\n      }\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isAuthenticated, loadCart]);\n\n  // 장바구니 상품 수량 변경 (useCallback 적용)\n  const updateItemQuantity = useCallback(async (cartItemId, quantity) => {\n    if (quantity < 1) return;\n    setIsLoading(true);\n    try {\n      await updateCartItem(cartItemId, quantity);\n      await loadCart();\n    } catch (error) {\n      console.error('장바구니 수정 실패:', error);\n      toast.error('수량을 변경하지 못했습니다.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [loadCart]);\n\n  // 장바구니에서 상품 제거 (useCallback 적용)\n  const removeItemFromCart = useCallback(async cartItemId => {\n    setIsLoading(true);\n    try {\n      await removeFromCart(cartItemId);\n      toast.success('상품이 장바구니에서 제거되었습니다.');\n      await loadCart();\n    } catch (error) {\n      console.error('장바구니 제거 실패:', error);\n      toast.error('상품을 제거하지 못했습니다.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [loadCart]);\n\n  // 장바구니 비우기 (useCallback 적용)\n  const emptyCart = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      await clearCart();\n      toast.success('장바구니가 비워졌습니다.');\n      setCartItems([]);\n      setTotalItems(0);\n      setTotalPrice(0);\n    } catch (error) {\n      console.error('장바구니 비우기 실패:', error);\n      toast.error('장바구니를 비우지 못했습니다.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // 로그인 상태가 변경되면 장바구니 정보 로드\n  useEffect(() => {\n    if (isAuthenticated) {\n      loadCart();\n    } else {\n      setCartItems([]);\n      setTotalItems(0);\n      setTotalPrice(0);\n    }\n  }, [isAuthenticated, loadCart]);\n\n  // 컨텍스트에 제공할 값\n  const value = {\n    cartItems,\n    totalItems,\n    totalPrice,\n    isLoading,\n    loadCart,\n    addItemToCart,\n    updateItemQuantity,\n    removeItemFromCart,\n    emptyCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 10\n  }, this);\n};\n\n// 장바구니 컨텍스트 사용을 위한 훅\n_s(CartProvider, \"9I8yZmimE3uGun6FT+hCwu/gIF8=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart는 CartProvider 내부에서만 사용할 수 있습니다.');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","getCartItems","getCartSummary","addToCart","updateCartItem","removeFromCart","clearCart","useAuth","toast","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","totalItems","setTotalItems","totalPrice","setTotalPrice","isLoading","setIsLoading","isAuthenticated","loadCart","items","results","summary","total_items","total_price","error","console","addItemToCart","productId","quantity","warning","success","response","data","message","detail","updateItemQuantity","cartItemId","removeItemFromCart","emptyCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\r\nimport { getCartItems, getCartSummary, addToCart, updateCartItem, removeFromCart, clearCart } from '../api/cart';\r\nimport { useAuth } from './AuthContext';\r\nimport { toast } from 'react-toastify';\r\n\r\n// 장바구니 컨텍스트 생성\r\nconst CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [totalItems, setTotalItems] = useState(0);\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { isAuthenticated } = useAuth();\r\n\r\n  // 장바구니 정보 로드 (useCallback 적용)\r\n  const loadCart = useCallback(async () => {\r\n    if (!isAuthenticated) return;\r\n    setIsLoading(true);\r\n    try {\r\n      // 장바구니 아이템 가져오기\r\n      const items = await getCartItems();\r\n      setCartItems(items.results || []);\r\n      \r\n      // 장바구니 요약 정보 가져오기\r\n      const summary = await getCartSummary();\r\n      setTotalItems(summary.total_items);\r\n      setTotalPrice(summary.total_price);\r\n    } catch (error) {\r\n      console.error('장바구니 로드 실패:', error);\r\n      toast.error('장바구니 정보를 불러오는데 실패했습니다.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  // 장바구니에 상품 추가 (useCallback 적용)\r\n  const addItemToCart = useCallback(async (productId, quantity = 1) => {\r\n    if (!isAuthenticated) {\r\n      toast.warning('로그인이 필요합니다.');\r\n      return false;\r\n    }\r\n    setIsLoading(true);\r\n    try {\r\n      await addToCart(productId, quantity);\r\n      toast.success('상품이 장바구니에 추가되었습니다.');\r\n      await loadCart();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('장바구니 추가 실패:', error);\r\n      \r\n      if (error.response && error.response.data) {\r\n        // 서버 오류 메시지 표시\r\n        const message = error.response.data.quantity || error.response.data.detail || '장바구니에 추가하지 못했습니다.';\r\n        toast.error(message);\r\n      } else {\r\n        toast.error('장바구니에 추가하지 못했습니다.');\r\n      }\r\n      \r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [isAuthenticated, loadCart]);\r\n\r\n  // 장바구니 상품 수량 변경 (useCallback 적용)\r\n  const updateItemQuantity = useCallback(async (cartItemId, quantity) => {\r\n    if (quantity < 1) return;\r\n    \r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      await updateCartItem(cartItemId, quantity);\r\n      await loadCart();\r\n    } catch (error) {\r\n      console.error('장바구니 수정 실패:', error);\r\n      toast.error('수량을 변경하지 못했습니다.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [loadCart]);\r\n\r\n  // 장바구니에서 상품 제거 (useCallback 적용)\r\n  const removeItemFromCart = useCallback(async (cartItemId) => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      await removeFromCart(cartItemId);\r\n      toast.success('상품이 장바구니에서 제거되었습니다.');\r\n      await loadCart();\r\n    } catch (error) {\r\n      console.error('장바구니 제거 실패:', error);\r\n      toast.error('상품을 제거하지 못했습니다.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [loadCart]);\r\n\r\n  // 장바구니 비우기 (useCallback 적용)\r\n  const emptyCart = useCallback(async () => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      await clearCart();\r\n      toast.success('장바구니가 비워졌습니다.');\r\n      setCartItems([]);\r\n      setTotalItems(0);\r\n      setTotalPrice(0);\r\n    } catch (error) {\r\n      console.error('장바구니 비우기 실패:', error);\r\n      toast.error('장바구니를 비우지 못했습니다.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // 로그인 상태가 변경되면 장바구니 정보 로드\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      loadCart();\r\n    } else {\r\n      setCartItems([]);\r\n      setTotalItems(0);\r\n      setTotalPrice(0);\r\n    }\r\n  }, [isAuthenticated, loadCart]);\r\n\r\n  // 컨텍스트에 제공할 값\r\n  const value = {\r\n    cartItems,\r\n    totalItems,\r\n    totalPrice,\r\n    isLoading,\r\n    loadCart,\r\n    addItemToCart,\r\n    updateItemQuantity,\r\n    removeItemFromCart,\r\n    emptyCart,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n\r\n// 장바구니 컨텍스트 사용을 위한 훅\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart는 CartProvider 내부에서만 사용할 수 있습니다.');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC1F,SAASC,YAAY,EAAEC,cAAc,EAAEC,SAAS,EAAEC,cAAc,EAAEC,cAAc,EAAEC,SAAS,QAAQ,aAAa;AAChH,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGf,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMgB,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAE0B;EAAgB,CAAC,GAAGhB,OAAO,CAAC,CAAC;;EAErC;EACA,MAAMiB,QAAQ,GAAGxB,WAAW,CAAC,YAAY;IACvC,IAAI,CAACuB,eAAe,EAAE;IACtBD,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF;MACA,MAAMG,KAAK,GAAG,MAAMxB,YAAY,CAAC,CAAC;MAClCe,YAAY,CAACS,KAAK,CAACC,OAAO,IAAI,EAAE,CAAC;;MAEjC;MACA,MAAMC,OAAO,GAAG,MAAMzB,cAAc,CAAC,CAAC;MACtCgB,aAAa,CAACS,OAAO,CAACC,WAAW,CAAC;MAClCR,aAAa,CAACO,OAAO,CAACE,WAAW,CAAC;IACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnCtB,KAAK,CAACsB,KAAK,CAAC,wBAAwB,CAAC;IACvC,CAAC,SAAS;MACRR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACC,eAAe,CAAC,CAAC;;EAErB;EACA,MAAMS,aAAa,GAAGhC,WAAW,CAAC,OAAOiC,SAAS,EAAEC,QAAQ,GAAG,CAAC,KAAK;IACnE,IAAI,CAACX,eAAe,EAAE;MACpBf,KAAK,CAAC2B,OAAO,CAAC,aAAa,CAAC;MAC5B,OAAO,KAAK;IACd;IACAb,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMnB,SAAS,CAAC8B,SAAS,EAAEC,QAAQ,CAAC;MACpC1B,KAAK,CAAC4B,OAAO,CAAC,oBAAoB,CAAC;MACnC,MAAMZ,QAAQ,CAAC,CAAC;MAChB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MAEnC,IAAIA,KAAK,CAACO,QAAQ,IAAIP,KAAK,CAACO,QAAQ,CAACC,IAAI,EAAE;QACzC;QACA,MAAMC,OAAO,GAAGT,KAAK,CAACO,QAAQ,CAACC,IAAI,CAACJ,QAAQ,IAAIJ,KAAK,CAACO,QAAQ,CAACC,IAAI,CAACE,MAAM,IAAI,mBAAmB;QACjGhC,KAAK,CAACsB,KAAK,CAACS,OAAO,CAAC;MACtB,CAAC,MAAM;QACL/B,KAAK,CAACsB,KAAK,CAAC,mBAAmB,CAAC;MAClC;MAEA,OAAO,KAAK;IACd,CAAC,SAAS;MACRR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACC,eAAe,EAAEC,QAAQ,CAAC,CAAC;;EAE/B;EACA,MAAMiB,kBAAkB,GAAGzC,WAAW,CAAC,OAAO0C,UAAU,EAAER,QAAQ,KAAK;IACrE,IAAIA,QAAQ,GAAG,CAAC,EAAE;IAElBZ,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAMlB,cAAc,CAACsC,UAAU,EAAER,QAAQ,CAAC;MAC1C,MAAMV,QAAQ,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnCtB,KAAK,CAACsB,KAAK,CAAC,iBAAiB,CAAC;IAChC,CAAC,SAAS;MACRR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACE,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMmB,kBAAkB,GAAG3C,WAAW,CAAC,MAAO0C,UAAU,IAAK;IAC3DpB,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAMjB,cAAc,CAACqC,UAAU,CAAC;MAChClC,KAAK,CAAC4B,OAAO,CAAC,qBAAqB,CAAC;MACpC,MAAMZ,QAAQ,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnCtB,KAAK,CAACsB,KAAK,CAAC,iBAAiB,CAAC;IAChC,CAAC,SAAS;MACRR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACE,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMoB,SAAS,GAAG5C,WAAW,CAAC,YAAY;IACxCsB,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAMhB,SAAS,CAAC,CAAC;MACjBE,KAAK,CAAC4B,OAAO,CAAC,eAAe,CAAC;MAC9BpB,YAAY,CAAC,EAAE,CAAC;MAChBE,aAAa,CAAC,CAAC,CAAC;MAChBE,aAAa,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCtB,KAAK,CAACsB,KAAK,CAAC,kBAAkB,CAAC;IACjC,CAAC,SAAS;MACRR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAvB,SAAS,CAAC,MAAM;IACd,IAAIwB,eAAe,EAAE;MACnBC,QAAQ,CAAC,CAAC;IACZ,CAAC,MAAM;MACLR,YAAY,CAAC,EAAE,CAAC;MAChBE,aAAa,CAAC,CAAC,CAAC;MAChBE,aAAa,CAAC,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACG,eAAe,EAAEC,QAAQ,CAAC,CAAC;;EAE/B;EACA,MAAMqB,KAAK,GAAG;IACZ9B,SAAS;IACTE,UAAU;IACVE,UAAU;IACVE,SAAS;IACTG,QAAQ;IACRQ,aAAa;IACbS,kBAAkB;IAClBE,kBAAkB;IAClBC;EACF,CAAC;EAED,oBAAOlC,OAAA,CAACC,WAAW,CAACmC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhC,QAAA,EAAEA;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;;AAED;AAAApC,EAAA,CAvIaF,YAAY;EAAA,QAKKL,OAAO;AAAA;AAAA4C,EAAA,GALxBvC,YAAY;AAwIzB,OAAO,MAAMwC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGxD,UAAU,CAACa,WAAW,CAAC;EACvC,IAAI,CAAC2C,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}