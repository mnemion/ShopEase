{"ast":null,"code":"import apiClient from './client';\n\n// 회원가입 API\nexport const register = async userData => {\n  const response = await apiClient.post('/users/register/', userData);\n  return response.data;\n};\n\n// 로그인 API\nexport const login = async credentials => {\n  const response = await apiClient.post('/users/login/', credentials);\n  return response.data;\n};\n\n// 로그아웃 API\nexport const logout = async refreshToken => {\n  const response = await apiClient.post('/users/logout/', {\n    refresh: refreshToken\n  });\n  return response.data;\n};\n\n// 내 정보 조회 API\nexport const getProfile = async () => {\n  try {\n    const response = await apiClient.get('/users/users/me/');\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch profile:', error);\n    throw error;\n  }\n};\n\n// 내 정보 수정 API\nexport const updateProfile = async profileData => {\n  const response = await apiClient.put('/users/me/', profileData);\n  return response.data;\n};\n\n// 배송지 목록 조회 API\nexport const getAddresses = async () => {\n  const response = await apiClient.get('/users/addresses/');\n  return response.data;\n};\n\n// 배송지 추가 API\nexport const addAddress = async addressData => {\n  const response = await apiClient.post('/users/addresses/', addressData);\n  return response.data;\n};\n\n// 배송지 수정 API\nexport const updateAddress = async (id, addressData) => {\n  const response = await apiClient.put(`/users/addresses/${id}/`, addressData);\n  return response.data;\n};\n\n// 배송지 삭제 API\nexport const deleteAddress = async id => {\n  const response = await apiClient.delete(`/users/addresses/${id}/`);\n  return response.data;\n};\n\n// 소셜 로그인 URL 얻기\nexport const getSocialLoginUrl = provider => {\n  // 기본 백엔드 URL에서 /api 제거 확인\n  let BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n  // /api로 끝나는 경우 제거\n  BASE_URL = BASE_URL.replace(/\\/api\\/?$/, '');\n\n  // 올바른 URL 생성\n  const url = `${BASE_URL}/accounts/${provider}/login/`;\n\n  // 디버깅 로그 추가\n  console.log(`[getSocialLoginUrl] Provider: ${provider}, Generated URL: ${url}`);\n  return url;\n};\n\n// 소셜 로그인을 위한 리다이렉트 (이제 팝업을 선호합니다만, 호환성을 위해 유지)\nexport const redirectToSocialLogin = provider => {\n  const url = getSocialLoginUrl(provider);\n  console.log(`[redirectToSocialLogin] Redirecting to: ${url}`);\n  window.location.href = url;\n};\n\n// 소셜 로그인을 위한 팝업 열기 (권장 방식)\nexport const openSocialLoginPopup = provider => {\n  const url = getSocialLoginUrl(provider);\n\n  // 디버깅 로그 추가\n  console.log(`[openSocialLoginPopup] Opening popup for ${provider} with URL: ${url}`);\n  const width = 600;\n  const height = 700;\n  const left = window.screen.width / 2 - width / 2;\n  const top = window.screen.height / 2 - height / 2;\n\n  // 팝업 창 이름을 고유하게 설정하여 항상 새 창으로 열리도록 함\n  const popupName = `${provider}Login_${new Date().getTime()}`;\n\n  // 팝업 창 열기\n  const popup = window.open(url, popupName, `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=no, copyhistory=no, width=${width}, height=${height}, top=${top}, left=${left}`);\n\n  // 팝업 창이 열렸는지 확인\n  if (!popup || popup.closed || typeof popup.closed === 'undefined') {\n    console.error('[openSocialLoginPopup] 팝업이 차단되었습니다. 팝업 차단을 해제해주세요.');\n    alert('팝업이 차단되었습니다. 팝업 차단을 해제한 후 다시 시도해주세요.');\n    return null;\n  }\n\n  // 팝업 창에 포커스\n  popup.focus();\n\n  // 팝업 창 참조 반환 (필요시)\n  return popup;\n};\n\n// 소셜 로그인 콜백 데이터로 사용자 정보 업데이트\nexport const handleSocialLoginCallback = async tokenData => {\n  // tokenData는 { access_token, refresh_token } 형태로 전달됨\n  const {\n    access_token,\n    refresh_token\n  } = tokenData;\n  try {\n    // 로컬 스토리지에 토큰 저장\n    localStorage.setItem('access_token', access_token);\n    localStorage.setItem('refresh_token', refresh_token);\n\n    // 토큰을 헤더에 설정\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n\n    // 사용자 정보 가져오기\n    const user = await getProfile();\n\n    // 성공적인 로그인 결과 반환\n    return {\n      access: access_token,\n      refresh: refresh_token,\n      user\n    };\n  } catch (error) {\n    console.error('소셜 로그인 콜백 처리 실패:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["apiClient","register","userData","response","post","data","login","credentials","logout","refreshToken","refresh","getProfile","get","error","console","updateProfile","profileData","put","getAddresses","addAddress","addressData","updateAddress","id","deleteAddress","delete","getSocialLoginUrl","provider","BASE_URL","process","env","REACT_APP_API_URL","replace","url","log","redirectToSocialLogin","window","location","href","openSocialLoginPopup","width","height","left","screen","top","popupName","Date","getTime","popup","open","closed","alert","focus","handleSocialLoginCallback","tokenData","access_token","refresh_token","localStorage","setItem","defaults","headers","common","user","access"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/api/auth.js"],"sourcesContent":["import apiClient from './client';\r\n\r\n// 회원가입 API\r\nexport const register = async (userData) => {\r\n  const response = await apiClient.post('/users/register/', userData);\r\n  return response.data;\r\n};\r\n\r\n// 로그인 API\r\nexport const login = async (credentials) => {\r\n  const response = await apiClient.post('/users/login/', credentials);\r\n  return response.data;\r\n};\r\n\r\n// 로그아웃 API\r\nexport const logout = async (refreshToken) => {\r\n  const response = await apiClient.post('/users/logout/', { refresh: refreshToken });\r\n  return response.data;\r\n};\r\n\r\n// 내 정보 조회 API\r\nexport const getProfile = async () => {\r\n  try {\r\n    const response = await apiClient.get('/users/users/me/');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Failed to fetch profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 내 정보 수정 API\r\nexport const updateProfile = async (profileData) => {\r\n  const response = await apiClient.put('/users/me/', profileData);\r\n  return response.data;\r\n};\r\n\r\n// 배송지 목록 조회 API\r\nexport const getAddresses = async () => {\r\n  const response = await apiClient.get('/users/addresses/');\r\n  return response.data;\r\n};\r\n\r\n// 배송지 추가 API\r\nexport const addAddress = async (addressData) => {\r\n  const response = await apiClient.post('/users/addresses/', addressData);\r\n  return response.data;\r\n};\r\n\r\n// 배송지 수정 API\r\nexport const updateAddress = async (id, addressData) => {\r\n  const response = await apiClient.put(`/users/addresses/${id}/`, addressData);\r\n  return response.data;\r\n};\r\n\r\n// 배송지 삭제 API\r\nexport const deleteAddress = async (id) => {\r\n  const response = await apiClient.delete(`/users/addresses/${id}/`);\r\n  return response.data;\r\n};\r\n\r\n// 소셜 로그인 URL 얻기\r\nexport const getSocialLoginUrl = (provider) => {\r\n  // 기본 백엔드 URL에서 /api 제거 확인\r\n  let BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n  // /api로 끝나는 경우 제거\r\n  BASE_URL = BASE_URL.replace(/\\/api\\/?$/, '');\r\n  \r\n  // 올바른 URL 생성\r\n  const url = `${BASE_URL}/accounts/${provider}/login/`;\r\n  \r\n  // 디버깅 로그 추가\r\n  console.log(`[getSocialLoginUrl] Provider: ${provider}, Generated URL: ${url}`);\r\n  \r\n  return url;\r\n};\r\n\r\n// 소셜 로그인을 위한 리다이렉트 (이제 팝업을 선호합니다만, 호환성을 위해 유지)\r\nexport const redirectToSocialLogin = (provider) => {\r\n  const url = getSocialLoginUrl(provider);\r\n  console.log(`[redirectToSocialLogin] Redirecting to: ${url}`);\r\n  window.location.href = url;\r\n};\r\n\r\n// 소셜 로그인을 위한 팝업 열기 (권장 방식)\r\nexport const openSocialLoginPopup = (provider) => {\r\n  const url = getSocialLoginUrl(provider);\r\n  \r\n  // 디버깅 로그 추가\r\n  console.log(`[openSocialLoginPopup] Opening popup for ${provider} with URL: ${url}`);\r\n  \r\n  const width = 600;\r\n  const height = 700;\r\n  const left = window.screen.width / 2 - width / 2;\r\n  const top = window.screen.height / 2 - height / 2;\r\n  \r\n  // 팝업 창 이름을 고유하게 설정하여 항상 새 창으로 열리도록 함\r\n  const popupName = `${provider}Login_${new Date().getTime()}`;\r\n  \r\n  // 팝업 창 열기\r\n  const popup = window.open(\r\n    url,\r\n    popupName,\r\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=no, copyhistory=no, width=${width}, height=${height}, top=${top}, left=${left}`\r\n  );\r\n  \r\n  // 팝업 창이 열렸는지 확인\r\n  if (!popup || popup.closed || typeof popup.closed === 'undefined') {\r\n    console.error('[openSocialLoginPopup] 팝업이 차단되었습니다. 팝업 차단을 해제해주세요.');\r\n    alert('팝업이 차단되었습니다. 팝업 차단을 해제한 후 다시 시도해주세요.');\r\n    return null;\r\n  }\r\n  \r\n  // 팝업 창에 포커스\r\n  popup.focus();\r\n  \r\n  // 팝업 창 참조 반환 (필요시)\r\n  return popup;\r\n};\r\n\r\n// 소셜 로그인 콜백 데이터로 사용자 정보 업데이트\r\nexport const handleSocialLoginCallback = async (tokenData) => {\r\n  // tokenData는 { access_token, refresh_token } 형태로 전달됨\r\n  const { access_token, refresh_token } = tokenData;\r\n  \r\n  try {\r\n    // 로컬 스토리지에 토큰 저장\r\n    localStorage.setItem('access_token', access_token);\r\n    localStorage.setItem('refresh_token', refresh_token);\r\n    \r\n    // 토큰을 헤더에 설정\r\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n    \r\n    // 사용자 정보 가져오기\r\n    const user = await getProfile();\r\n    \r\n    // 성공적인 로그인 결과 반환\r\n    return {\r\n      access: access_token,\r\n      refresh: refresh_token,\r\n      user\r\n    };\r\n  } catch (error) {\r\n    console.error('소셜 로그인 콜백 처리 실패:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}