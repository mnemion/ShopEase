{"ast":null,"code":"/**\r\n * 이메일 유효성 검사\r\n * @param {string} email - 검사할 이메일\r\n * @returns {boolean} 유효성 여부\r\n */export const validateEmail=email=>{const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);};/**\r\n   * 비밀번호 유효성 검사 (최소 8자, 최소 하나의 문자와 숫자)\r\n   * @param {string} password - 검사할 비밀번호\r\n   * @returns {boolean} 유효성 여부\r\n   */export const validatePassword=password=>{const passwordRegex=/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;return passwordRegex.test(password);};/**\r\n   * 전화번호 유효성 검사 (한국 전화번호 형식)\r\n   * @param {string} phone - 검사할 전화번호\r\n   * @returns {boolean} 유효성 여부\r\n   */export const validatePhone=phone=>{// 한국 전화번호 검증 (예: 01012345678 또는 010-1234-5678)\nconst phoneRegex=/^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/;return phoneRegex.test(phone);};/**\r\n   * 우편번호 유효성 검사 (한국 우편번호 형식)\r\n   * @param {string} zipCode - 검사할 우편번호\r\n   * @returns {boolean} 유효성 여부\r\n   */export const validateZipCode=zipCode=>{// 한국 우편번호 검증 (5자리)\nconst zipCodeRegex=/^\\d{5}$/;return zipCodeRegex.test(zipCode);};/**\r\n   * 필수 입력 필드 유효성 검사\r\n   * @param {string} value - 검사할 값\r\n   * @returns {boolean} 유효성 여부\r\n   */export const validateRequired=value=>{return value!==null&&value!==undefined&&value.trim()!=='';};/**\r\n   * 숫자 범위 유효성 검사\r\n   * @param {number} value - 검사할 값\r\n   * @param {number} min - 최소값\r\n   * @param {number} max - 최대값\r\n   * @returns {boolean} 유효성 여부\r\n   */export const validateNumberRange=(value,min,max)=>{const num=Number(value);return!isNaN(num)&&num>=min&&num<=max;};/**\r\n   * 폼 필드 유효성 검사 결과 반환\r\n   * @param {string} value - 필드 값\r\n   * @param {Array} validations - 적용할 유효성 검사 규칙 배열\r\n   * @returns {Object} { isValid, error } 형식의 결과 객체\r\n   */export const validateField=(value,validations)=>{for(const validation of validations){const{validator,errorMessage}=validation;if(!validator(value)){return{isValid:false,error:errorMessage};}}return{isValid:true,error:null};};","map":{"version":3,"names":["validateEmail","email","emailRegex","test","validatePassword","password","passwordRegex","validatePhone","phone","phoneRegex","validateZipCode","zipCode","zipCodeRegex","validateRequired","value","undefined","trim","validateNumberRange","min","max","num","Number","isNaN","validateField","validations","validation","validator","errorMessage","isValid","error"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/utils/validators.js"],"sourcesContent":["/**\r\n * 이메일 유효성 검사\r\n * @param {string} email - 검사할 이메일\r\n * @returns {boolean} 유효성 여부\r\n */\r\nexport const validateEmail = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n  \r\n  /**\r\n   * 비밀번호 유효성 검사 (최소 8자, 최소 하나의 문자와 숫자)\r\n   * @param {string} password - 검사할 비밀번호\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validatePassword = (password) => {\r\n    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\r\n    return passwordRegex.test(password);\r\n  };\r\n  \r\n  /**\r\n   * 전화번호 유효성 검사 (한국 전화번호 형식)\r\n   * @param {string} phone - 검사할 전화번호\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validatePhone = (phone) => {\r\n    // 한국 전화번호 검증 (예: 01012345678 또는 010-1234-5678)\r\n    const phoneRegex = /^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/;\r\n    return phoneRegex.test(phone);\r\n  };\r\n  \r\n  /**\r\n   * 우편번호 유효성 검사 (한국 우편번호 형식)\r\n   * @param {string} zipCode - 검사할 우편번호\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validateZipCode = (zipCode) => {\r\n    // 한국 우편번호 검증 (5자리)\r\n    const zipCodeRegex = /^\\d{5}$/;\r\n    return zipCodeRegex.test(zipCode);\r\n  };\r\n  \r\n  /**\r\n   * 필수 입력 필드 유효성 검사\r\n   * @param {string} value - 검사할 값\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validateRequired = (value) => {\r\n    return value !== null && value !== undefined && value.trim() !== '';\r\n  };\r\n  \r\n  /**\r\n   * 숫자 범위 유효성 검사\r\n   * @param {number} value - 검사할 값\r\n   * @param {number} min - 최소값\r\n   * @param {number} max - 최대값\r\n   * @returns {boolean} 유효성 여부\r\n   */\r\n  export const validateNumberRange = (value, min, max) => {\r\n    const num = Number(value);\r\n    return !isNaN(num) && num >= min && num <= max;\r\n  };\r\n  \r\n  /**\r\n   * 폼 필드 유효성 검사 결과 반환\r\n   * @param {string} value - 필드 값\r\n   * @param {Array} validations - 적용할 유효성 검사 규칙 배열\r\n   * @returns {Object} { isValid, error } 형식의 결과 객체\r\n   */\r\n  export const validateField = (value, validations) => {\r\n    for (const validation of validations) {\r\n      const { validator, errorMessage } = validation;\r\n      \r\n      if (!validator(value)) {\r\n        return {\r\n          isValid: false,\r\n          error: errorMessage\r\n        };\r\n      }\r\n    }\r\n    \r\n    return {\r\n      isValid: true,\r\n      error: null\r\n    };\r\n  };"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,aAAa,CAAIC,KAAK,EAAK,CACpC,KAAM,CAAAC,UAAU,CAAG,4BAA4B,CAC/C,MAAO,CAAAA,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC,CAC/B,CAAC,CAED;AACF;AACA;AACA;AACA,KACE,MAAO,MAAM,CAAAG,gBAAgB,CAAIC,QAAQ,EAAK,CAC5C,KAAM,CAAAC,aAAa,CAAG,wCAAwC,CAC9D,MAAO,CAAAA,aAAa,CAACH,IAAI,CAACE,QAAQ,CAAC,CACrC,CAAC,CAED;AACF;AACA;AACA;AACA,KACE,MAAO,MAAM,CAAAE,aAAa,CAAIC,KAAK,EAAK,CACtC;AACA,KAAM,CAAAC,UAAU,CAAG,+CAA+C,CAClE,MAAO,CAAAA,UAAU,CAACN,IAAI,CAACK,KAAK,CAAC,CAC/B,CAAC,CAED;AACF;AACA;AACA;AACA,KACE,MAAO,MAAM,CAAAE,eAAe,CAAIC,OAAO,EAAK,CAC1C;AACA,KAAM,CAAAC,YAAY,CAAG,SAAS,CAC9B,MAAO,CAAAA,YAAY,CAACT,IAAI,CAACQ,OAAO,CAAC,CACnC,CAAC,CAED;AACF;AACA;AACA;AACA,KACE,MAAO,MAAM,CAAAE,gBAAgB,CAAIC,KAAK,EAAK,CACzC,MAAO,CAAAA,KAAK,GAAK,IAAI,EAAIA,KAAK,GAAKC,SAAS,EAAID,KAAK,CAACE,IAAI,CAAC,CAAC,GAAK,EAAE,CACrE,CAAC,CAED;AACF;AACA;AACA;AACA;AACA;AACA,KACE,MAAO,MAAM,CAAAC,mBAAmB,CAAGA,CAACH,KAAK,CAAEI,GAAG,CAAEC,GAAG,GAAK,CACtD,KAAM,CAAAC,GAAG,CAAGC,MAAM,CAACP,KAAK,CAAC,CACzB,MAAO,CAACQ,KAAK,CAACF,GAAG,CAAC,EAAIA,GAAG,EAAIF,GAAG,EAAIE,GAAG,EAAID,GAAG,CAChD,CAAC,CAED;AACF;AACA;AACA;AACA;AACA,KACE,MAAO,MAAM,CAAAI,aAAa,CAAGA,CAACT,KAAK,CAAEU,WAAW,GAAK,CACnD,IAAK,KAAM,CAAAC,UAAU,GAAI,CAAAD,WAAW,CAAE,CACpC,KAAM,CAAEE,SAAS,CAAEC,YAAa,CAAC,CAAGF,UAAU,CAE9C,GAAI,CAACC,SAAS,CAACZ,KAAK,CAAC,CAAE,CACrB,MAAO,CACLc,OAAO,CAAE,KAAK,CACdC,KAAK,CAAEF,YACT,CAAC,CACH,CACF,CAEA,MAAO,CACLC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,IACT,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}