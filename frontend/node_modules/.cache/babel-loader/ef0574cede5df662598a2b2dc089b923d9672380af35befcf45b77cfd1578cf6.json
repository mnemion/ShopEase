{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useNavigate,useLocation}from'react-router-dom';import{useAuth}from'../context/AuthContext';import{handleSocialLoginCallback}from'../api/auth';import{toast}from'react-toastify';import Loading from'../components/ui/Loading';import apiClient from'../api/client';/**\r\n * 소셜 로그인 콜백 처리 컴포넌트\r\n * URL 파라미터로 전달된 토큰을 처리 (팝업 방식이 실패할 경우 대체 방안)\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SocialLoginCallback=()=>{const{login,isAuthenticated}=useAuth();const navigate=useNavigate();const location=useLocation();const[debugInfo,setDebugInfo]=useState({status:'초기화 중...',tokens:{access:false,refresh:false},error:null});// 디버깅 로그 함수\nconst debug=message=>{console.log(\"[SocialLoginCallback]\",message);return message;// 로깅 후 메시지 반환 (상태 업데이트용)\n};useEffect(()=>{const status=debug(\"컴포넌트 마운트\");debug(`현재 URL: ${location.pathname}${location.search}`);// 이미 인증되었으면 홈으로 리디렉션\nif(isAuthenticated){debug(\"이미 인증됨, 홈으로 리디렉션\");setDebugInfo(prev=>({...prev,status:\"이미 인증됨, 홈으로 리디렉션\"}));navigate('/',{replace:true});return;}const processTokens=async()=>{try{var _result$user3;setDebugInfo(prev=>({...prev,status:\"토큰 처리 시작\"}));// URL 쿼리 파라미터에서 토큰 추출\nconst searchParams=new URLSearchParams(location.search);const access_token=searchParams.get('access_token');const refresh_token=searchParams.get('refresh_token');debug(`토큰 존재 여부 - 액세스: ${Boolean(access_token)}, 리프레시: ${Boolean(refresh_token)}`);setDebugInfo(prev=>({...prev,status:\"URL에서 토큰 확인 완료\",tokens:{access:Boolean(access_token),refresh:Boolean(refresh_token),accessPrefix:access_token?access_token.substring(0,10)+'...':'없음',refreshPrefix:refresh_token?refresh_token.substring(0,10)+'...':'없음'}}));// 로컬 스토리지 확인\nconst storedAccessToken=localStorage.getItem('access_token');const storedRefreshToken=localStorage.getItem('refresh_token');const timestamp=localStorage.getItem('social_login_timestamp');debug(`로컬 스토리지 토큰 존재 여부 - 액세스: ${Boolean(storedAccessToken)}, 리프레시: ${Boolean(storedRefreshToken)}, 타임스탬프: ${timestamp}`);setDebugInfo(prev=>({...prev,status:\"로컬 스토리지 확인 완료\",localStorage:{access:Boolean(storedAccessToken),refresh:Boolean(storedRefreshToken),timestamp:timestamp}}));// URL의 토큰 또는 로컬 스토리지의 토큰 사용\nconst finalAccessToken=access_token||storedAccessToken;const finalRefreshToken=refresh_token||storedRefreshToken;if(!finalAccessToken||!finalRefreshToken){const errorMsg=debug(\"URL 및 로컬 스토리지 모두에서 토큰을 찾을 수 없음\");setDebugInfo(prev=>({...prev,status:\"토큰 없음, 로그인 페이지로 이동\",error:errorMsg}));toast.error('로그인 정보를 찾을 수 없습니다.');// 3초 후에 리디렉트\nsetTimeout(()=>{navigate('/login',{replace:true});},3000);return;}debug(\"토큰으로 사용자 정보 요청 시작\");setDebugInfo(prev=>({...prev,status:\"API 요청 준비 중\"}));// API 헤더 설정\napiClient.defaults.headers.common['Authorization']=`Bearer ${finalAccessToken}`;setDebugInfo(prev=>({...prev,status:\"API 헤더 설정 완료\"}));// 토큰으로 사용자 정보 처리\nconst result=await handleSocialLoginCallback({access_token:finalAccessToken,refresh_token:finalRefreshToken});setDebugInfo(prev=>{var _result$user,_result$user2;return{...prev,status:\"사용자 정보 수신 성공\",user:{id:(_result$user=result.user)===null||_result$user===void 0?void 0:_result$user.id,email:((_result$user2=result.user)===null||_result$user2===void 0?void 0:_result$user2.email)||'이메일 없음'}};});debug(`사용자 정보 수신 성공: ${((_result$user3=result.user)===null||_result$user3===void 0?void 0:_result$user3.email)||'이메일 없음'}`);// 성공 메시지\ntoast.success('소셜 로그인에 성공했습니다!');// 로그인 상태 업데이트\nlogin(result.access,result.refresh,result.user);debug(\"로그인 상태 업데이트 완료\");setDebugInfo(prev=>({...prev,status:\"로그인 완료, 홈으로 이동\"}));// 타임스탬프 제거\nlocalStorage.removeItem('social_login_timestamp');// 홈으로 리다이렉트\ndebug(\"홈으로 리다이렉트\");setTimeout(()=>{navigate('/',{replace:true});},1000);}catch(error){console.error('소셜 로그인 콜백 처리 중 오류:',error);const errorMsg=debug(`오류 세부 정보: ${error.message}`);let errorDetails={message:error.message};if(error.response){debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data||{})}`);errorDetails.response={status:error.response.status,data:error.response.data};}setDebugInfo(prev=>({...prev,status:\"오류 발생\",error:errorMsg,errorDetails:errorDetails}));toast.error('소셜 로그인 처리 중 오류가 발생했습니다.');// 토큰 삭제\nlocalStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('social_login_timestamp');// 3초 후에 리디렉트\nsetTimeout(()=>{navigate('/login',{replace:true});},3000);}};processTokens();},[location,login,navigate,isAuthenticated]);// 처리 중 로딩 표시\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center justify-center min-h-screen p-4\",children:[/*#__PURE__*/_jsx(Loading,{}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-4 text-lg text-gray-600\",children:\"\\uC18C\\uC15C \\uB85C\\uADF8\\uC778 \\uCC98\\uB9AC \\uC911\\uC785\\uB2C8\\uB2E4...\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-gray-500 mt-2\",children:[\"\\uC0C1\\uD0DC: \",debugInfo.status]}),/*#__PURE__*/_jsxs(\"small\",{className:\"text-gray-400 mt-2\",children:[\"URL: \",location.pathname,location.search]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-6 w-full max-w-md p-4 bg-gray-50 rounded-lg border border-gray-200\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-sm font-medium text-gray-700 mb-2\",children:\"\\uB514\\uBC84\\uADF8 \\uC815\\uBCF4\"}),/*#__PURE__*/_jsx(\"pre\",{className:\"text-xs bg-gray-100 p-2 rounded overflow-auto max-h-32\",children:JSON.stringify(debugInfo,null,2)})]})]});};export default SocialLoginCallback;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","useAuth","handleSocialLoginCallback","toast","Loading","apiClient","jsx","_jsx","jsxs","_jsxs","SocialLoginCallback","login","isAuthenticated","navigate","location","debugInfo","setDebugInfo","status","tokens","access","refresh","error","debug","message","console","log","pathname","search","prev","replace","processTokens","_result$user3","searchParams","URLSearchParams","access_token","get","refresh_token","Boolean","accessPrefix","substring","refreshPrefix","storedAccessToken","localStorage","getItem","storedRefreshToken","timestamp","finalAccessToken","finalRefreshToken","errorMsg","setTimeout","defaults","headers","common","result","_result$user","_result$user2","user","id","email","success","removeItem","errorDetails","response","JSON","stringify","data","className","children"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/pages/SocialLoginCallback.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { handleSocialLoginCallback } from '../api/auth';\r\nimport { toast } from 'react-toastify';\r\nimport Loading from '../components/ui/Loading';\r\nimport apiClient from '../api/client';\r\n\r\n/**\r\n * 소셜 로그인 콜백 처리 컴포넌트\r\n * URL 파라미터로 전달된 토큰을 처리 (팝업 방식이 실패할 경우 대체 방안)\r\n */\r\nconst SocialLoginCallback = () => {\r\n  const { login, isAuthenticated } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [debugInfo, setDebugInfo] = useState({\r\n    status: '초기화 중...',\r\n    tokens: { access: false, refresh: false },\r\n    error: null\r\n  });\r\n\r\n  // 디버깅 로그 함수\r\n  const debug = (message) => {\r\n    console.log(\"[SocialLoginCallback]\", message);\r\n    return message; // 로깅 후 메시지 반환 (상태 업데이트용)\r\n  };\r\n\r\n  useEffect(() => {\r\n    const status = debug(\"컴포넌트 마운트\");\r\n    debug(`현재 URL: ${location.pathname}${location.search}`);\r\n    \r\n    // 이미 인증되었으면 홈으로 리디렉션\r\n    if (isAuthenticated) {\r\n      debug(\"이미 인증됨, 홈으로 리디렉션\");\r\n      setDebugInfo(prev => ({ ...prev, status: \"이미 인증됨, 홈으로 리디렉션\" }));\r\n      navigate('/', { replace: true });\r\n      return;\r\n    }\r\n\r\n    const processTokens = async () => {\r\n      try {\r\n        setDebugInfo(prev => ({ ...prev, status: \"토큰 처리 시작\" }));\r\n        \r\n        // URL 쿼리 파라미터에서 토큰 추출\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const access_token = searchParams.get('access_token');\r\n        const refresh_token = searchParams.get('refresh_token');\r\n\r\n        debug(`토큰 존재 여부 - 액세스: ${Boolean(access_token)}, 리프레시: ${Boolean(refresh_token)}`);\r\n        setDebugInfo(prev => ({ \r\n          ...prev, \r\n          status: \"URL에서 토큰 확인 완료\",\r\n          tokens: { \r\n            access: Boolean(access_token), \r\n            refresh: Boolean(refresh_token),\r\n            accessPrefix: access_token ? access_token.substring(0, 10) + '...' : '없음',\r\n            refreshPrefix: refresh_token ? refresh_token.substring(0, 10) + '...' : '없음'\r\n          }\r\n        }));\r\n\r\n        // 로컬 스토리지 확인\r\n        const storedAccessToken = localStorage.getItem('access_token');\r\n        const storedRefreshToken = localStorage.getItem('refresh_token');\r\n        const timestamp = localStorage.getItem('social_login_timestamp');\r\n        \r\n        debug(`로컬 스토리지 토큰 존재 여부 - 액세스: ${Boolean(storedAccessToken)}, 리프레시: ${Boolean(storedRefreshToken)}, 타임스탬프: ${timestamp}`);\r\n        setDebugInfo(prev => ({ \r\n          ...prev, \r\n          status: \"로컬 스토리지 확인 완료\",\r\n          localStorage: {\r\n            access: Boolean(storedAccessToken),\r\n            refresh: Boolean(storedRefreshToken),\r\n            timestamp: timestamp\r\n          }\r\n        }));\r\n\r\n        // URL의 토큰 또는 로컬 스토리지의 토큰 사용\r\n        const finalAccessToken = access_token || storedAccessToken;\r\n        const finalRefreshToken = refresh_token || storedRefreshToken;\r\n\r\n        if (!finalAccessToken || !finalRefreshToken) {\r\n          const errorMsg = debug(\"URL 및 로컬 스토리지 모두에서 토큰을 찾을 수 없음\");\r\n          setDebugInfo(prev => ({ \r\n            ...prev, \r\n            status: \"토큰 없음, 로그인 페이지로 이동\",\r\n            error: errorMsg\r\n          }));\r\n          toast.error('로그인 정보를 찾을 수 없습니다.');\r\n          \r\n          // 3초 후에 리디렉트\r\n          setTimeout(() => {\r\n            navigate('/login', { replace: true });\r\n          }, 3000);\r\n          return;\r\n        }\r\n\r\n        debug(\"토큰으로 사용자 정보 요청 시작\");\r\n        setDebugInfo(prev => ({ ...prev, status: \"API 요청 준비 중\" }));\r\n        \r\n        // API 헤더 설정\r\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${finalAccessToken}`;\r\n        setDebugInfo(prev => ({ ...prev, status: \"API 헤더 설정 완료\" }));\r\n        \r\n        // 토큰으로 사용자 정보 처리\r\n        const result = await handleSocialLoginCallback({\r\n          access_token: finalAccessToken,\r\n          refresh_token: finalRefreshToken\r\n        });\r\n        \r\n        setDebugInfo(prev => ({ \r\n          ...prev, \r\n          status: \"사용자 정보 수신 성공\",\r\n          user: {\r\n            id: result.user?.id,\r\n            email: result.user?.email || '이메일 없음'\r\n          }\r\n        }));\r\n        debug(`사용자 정보 수신 성공: ${result.user?.email || '이메일 없음'}`);\r\n        \r\n        // 성공 메시지\r\n        toast.success('소셜 로그인에 성공했습니다!');\r\n        \r\n        // 로그인 상태 업데이트\r\n        login(result.access, result.refresh, result.user);\r\n        debug(\"로그인 상태 업데이트 완료\");\r\n        setDebugInfo(prev => ({ ...prev, status: \"로그인 완료, 홈으로 이동\" }));\r\n        \r\n        // 타임스탬프 제거\r\n        localStorage.removeItem('social_login_timestamp');\r\n        \r\n        // 홈으로 리다이렉트\r\n        debug(\"홈으로 리다이렉트\");\r\n        setTimeout(() => {\r\n          navigate('/', { replace: true });\r\n        }, 1000);\r\n      } catch (error) {\r\n        console.error('소셜 로그인 콜백 처리 중 오류:', error);\r\n        const errorMsg = debug(`오류 세부 정보: ${error.message}`);\r\n        \r\n        let errorDetails = { message: error.message };\r\n        \r\n        if (error.response) {\r\n          debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data || {})}`);\r\n          errorDetails.response = {\r\n            status: error.response.status,\r\n            data: error.response.data\r\n          };\r\n        }\r\n        \r\n        setDebugInfo(prev => ({ \r\n          ...prev, \r\n          status: \"오류 발생\", \r\n          error: errorMsg,\r\n          errorDetails: errorDetails\r\n        }));\r\n        \r\n        toast.error('소셜 로그인 처리 중 오류가 발생했습니다.');\r\n        \r\n        // 토큰 삭제\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('social_login_timestamp');\r\n        \r\n        // 3초 후에 리디렉트\r\n        setTimeout(() => {\r\n          navigate('/login', { replace: true });\r\n        }, 3000);\r\n      }\r\n    };\r\n\r\n    processTokens();\r\n  }, [location, login, navigate, isAuthenticated]);\r\n\r\n  // 처리 중 로딩 표시\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4\">\r\n      <Loading />\r\n      <p className=\"mt-4 text-lg text-gray-600\">소셜 로그인 처리 중입니다...</p>\r\n      <p className=\"text-sm text-gray-500 mt-2\">상태: {debugInfo.status}</p>\r\n      <small className=\"text-gray-400 mt-2\">URL: {location.pathname}{location.search}</small>\r\n      \r\n      {/* 디버그 정보 표시 */}\r\n      <div className=\"mt-6 w-full max-w-md p-4 bg-gray-50 rounded-lg border border-gray-200\">\r\n        <h3 className=\"text-sm font-medium text-gray-700 mb-2\">디버그 정보</h3>\r\n        <pre className=\"text-xs bg-gray-100 p-2 rounded overflow-auto max-h-32\">\r\n          {JSON.stringify(debugInfo, null, 2)}\r\n        </pre>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SocialLoginCallback;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}