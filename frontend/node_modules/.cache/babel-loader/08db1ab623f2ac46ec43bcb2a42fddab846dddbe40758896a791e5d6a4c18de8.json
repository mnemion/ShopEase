{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\COM-LM\\\\Documents\\\\ShopEase\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { getProfile } from '../api/auth';\n\n// 인증 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 로컬 스토리지에서 토큰 가져오기\n  const getTokens = () => {\n    const access = localStorage.getItem('access_token');\n    const refresh = localStorage.getItem('refresh_token');\n    return {\n      access,\n      refresh\n    };\n  };\n\n  // 토큰 저장하기\n  const setTokens = (access, refresh) => {\n    localStorage.setItem('access_token', access);\n    localStorage.setItem('refresh_token', refresh);\n  };\n\n  // 토큰 제거하기\n  const removeTokens = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  };\n\n  // 로그인 처리\n  const login = (access, refresh, userData) => {\n    setTokens(access, refresh);\n    setUser(userData);\n    setIsAuthenticated(true);\n    setError(null);\n  };\n\n  // 로그아웃 처리\n  const logout = () => {\n    removeTokens();\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // 사용자 정보 갱신\n  const updateUserInfo = userData => {\n    setUser(userData);\n  };\n\n  // 소셜 로그인 메시지 핸들러\n  const handleSocialLoginMessage = useCallback(async event => {\n    var _event$data;\n    // 오리진 체크 (실제 배포 시 API URL 도메인으로 변경 필요)\n    const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n    const apiOrigin = API_URL.split('/api')[0];\n\n    // 개발 환경에서는 오리진 체크를 완화할 수 있음\n    if (process.env.NODE_ENV !== 'development' && event.origin !== apiOrigin) {\n      console.warn('오리진 불일치:', event.origin);\n      return;\n    }\n    if (((_event$data = event.data) === null || _event$data === void 0 ? void 0 : _event$data.type) === 'social-login-success') {\n      const {\n        access_token,\n        refresh_token\n      } = event.data.data;\n      if (access_token && refresh_token) {\n        // 토큰 저장\n        setTokens(access_token, refresh_token);\n        try {\n          // 사용자 정보 가져오기 (새 토큰으로 프로필 조회)\n          const userData = await getProfile();\n\n          // 로그인 상태 업데이트\n          setUser(userData);\n          setIsAuthenticated(true);\n          setError(null);\n\n          // 필요시 성공 메시지 표시\n          console.log('소셜 로그인 성공');\n        } catch (profileError) {\n          console.error('로그인 후 프로필 로드 실패:', profileError);\n\n          // 로그인 실패 처리 (토큰 제거)\n          removeTokens();\n          setError('소셜 로그인 후 사용자 정보를 가져오는데 실패했습니다.');\n        }\n      } else {\n        console.error('토큰 수신 실패:', event.data);\n        setError('소셜 로그인 처리 중 오류가 발생했습니다.');\n      }\n    }\n  }, []);\n\n  // 소셜 로그인 메시지 이벤트 리스너 등록\n  useEffect(() => {\n    window.addEventListener('message', handleSocialLoginMessage);\n    return () => {\n      window.removeEventListener('message', handleSocialLoginMessage);\n    };\n  }, [handleSocialLoginMessage]);\n\n  // 로그인 상태 확인 (앱 초기화 시 호출)\n  useEffect(() => {\n    const checkAuth = async () => {\n      setIsLoading(true);\n      const {\n        access\n      } = getTokens();\n      if (!access) {\n        setIsLoading(false);\n        return;\n      }\n      try {\n        const userData = await getProfile();\n        setUser(userData);\n        setIsAuthenticated(true);\n      } catch (err) {\n        console.error('사용자 정보 가져오기 실패:', err);\n        removeTokens();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // 컨텍스트에 제공할 값\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    logout,\n    updateUserInfo,\n    setError,\n    handleSocialLoginMessage // 소셜 로그인 메시지 핸들러 노출 (필요시)\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 10\n  }, this);\n};\n\n// 인증 컨텍스트 사용을 위한 훅\n_s(AuthProvider, \"a1dcZ3u9hv6roGJsuMtstlnEtH4=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","getProfile","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","getTokens","access","localStorage","getItem","refresh","setTokens","setItem","removeTokens","removeItem","login","userData","logout","updateUserInfo","handleSocialLoginMessage","event","_event$data","API_URL","process","env","REACT_APP_API_URL","apiOrigin","split","NODE_ENV","origin","console","warn","data","type","access_token","refresh_token","log","profileError","window","addEventListener","removeEventListener","checkAuth","err","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\r\nimport { getProfile } from '../api/auth';\r\n\r\n// 인증 컨텍스트 생성\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 로컬 스토리지에서 토큰 가져오기\r\n  const getTokens = () => {\r\n    const access = localStorage.getItem('access_token');\r\n    const refresh = localStorage.getItem('refresh_token');\r\n    return { access, refresh };\r\n  };\r\n\r\n  // 토큰 저장하기\r\n  const setTokens = (access, refresh) => {\r\n    localStorage.setItem('access_token', access);\r\n    localStorage.setItem('refresh_token', refresh);\r\n  };\r\n\r\n  // 토큰 제거하기\r\n  const removeTokens = () => {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n  };\r\n\r\n  // 로그인 처리\r\n  const login = (access, refresh, userData) => {\r\n    setTokens(access, refresh);\r\n    setUser(userData);\r\n    setIsAuthenticated(true);\r\n    setError(null);\r\n  };\r\n\r\n  // 로그아웃 처리\r\n  const logout = () => {\r\n    removeTokens();\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  // 사용자 정보 갱신\r\n  const updateUserInfo = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  // 소셜 로그인 메시지 핸들러\r\n  const handleSocialLoginMessage = useCallback(async (event) => {\r\n    // 오리진 체크 (실제 배포 시 API URL 도메인으로 변경 필요)\r\n    const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n    const apiOrigin = API_URL.split('/api')[0];\r\n    \r\n    // 개발 환경에서는 오리진 체크를 완화할 수 있음\r\n    if (process.env.NODE_ENV !== 'development' && event.origin !== apiOrigin) {\r\n      console.warn('오리진 불일치:', event.origin);\r\n      return;\r\n    }\r\n\r\n    if (event.data?.type === 'social-login-success') {\r\n      const { access_token, refresh_token } = event.data.data;\r\n\r\n      if (access_token && refresh_token) {\r\n        // 토큰 저장\r\n        setTokens(access_token, refresh_token);\r\n\r\n        try {\r\n          // 사용자 정보 가져오기 (새 토큰으로 프로필 조회)\r\n          const userData = await getProfile();\r\n          \r\n          // 로그인 상태 업데이트\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n          setError(null);\r\n          \r\n          // 필요시 성공 메시지 표시\r\n          console.log('소셜 로그인 성공');\r\n        } catch (profileError) {\r\n          console.error('로그인 후 프로필 로드 실패:', profileError);\r\n          \r\n          // 로그인 실패 처리 (토큰 제거)\r\n          removeTokens();\r\n          setError('소셜 로그인 후 사용자 정보를 가져오는데 실패했습니다.');\r\n        }\r\n      } else {\r\n        console.error('토큰 수신 실패:', event.data);\r\n        setError('소셜 로그인 처리 중 오류가 발생했습니다.');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // 소셜 로그인 메시지 이벤트 리스너 등록\r\n  useEffect(() => {\r\n    window.addEventListener('message', handleSocialLoginMessage);\r\n    return () => {\r\n      window.removeEventListener('message', handleSocialLoginMessage);\r\n    };\r\n  }, [handleSocialLoginMessage]);\r\n\r\n  // 로그인 상태 확인 (앱 초기화 시 호출)\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      setIsLoading(true);\r\n      const { access } = getTokens();\r\n      \r\n      if (!access) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const userData = await getProfile();\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n      } catch (err) {\r\n        console.error('사용자 정보 가져오기 실패:', err);\r\n        removeTokens();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    checkAuth();\r\n  }, []);\r\n\r\n  // 컨텍스트에 제공할 값\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    error,\r\n    login,\r\n    logout,\r\n    updateUserInfo,\r\n    setError,\r\n    handleSocialLoginMessage, // 소셜 로그인 메시지 핸들러 노출 (필요시)\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// 인증 컨텍스트 사용을 위한 훅\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}