{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect,useCallback}from'react';import{getProfile}from'../api/auth';// 인증 컨텍스트 생성\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);// 로컬 스토리지에서 토큰 가져오기\nconst getTokens=()=>{const access=localStorage.getItem('access_token');const refresh=localStorage.getItem('refresh_token');return{access,refresh};};// 토큰 저장하기\nconst setTokens=(access,refresh)=>{localStorage.setItem('access_token',access);localStorage.setItem('refresh_token',refresh);};// 토큰 제거하기\nconst removeTokens=()=>{localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');};// 로그인 처리\nconst login=(access,refresh,userData)=>{setTokens(access,refresh);setUser(userData);setIsAuthenticated(true);setError(null);};// 로그아웃 처리\nconst logout=()=>{removeTokens();setUser(null);setIsAuthenticated(false);// 세션/로컬스토리지 추가 정리\nsessionStorage.clear();localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');// 모든 쿠키 삭제 (간단 버전)\ndocument.cookie.split(';').forEach(function(c){document.cookie=c.replace(/^ +/,'').replace(/=.*/,'=;expires='+new Date().toUTCString()+';path=/');});};// 사용자 정보 갱신\nconst updateUserInfo=userData=>{setUser(userData);};// 소셜 로그인 메시지 핸들러\nconst handleSocialLoginMessage=useCallback(async event=>{var _event$data;// 오리진 체크 (실제 배포 시 API URL 도메인으로 변경 필요)\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const apiOrigin=API_URL.split('/api')[0];// 개발 환경에서는 오리진 체크를 완화할 수 있음\nif(process.env.NODE_ENV!=='development'&&event.origin!==apiOrigin){console.warn('오리진 불일치:',event.origin);return;}if(((_event$data=event.data)===null||_event$data===void 0?void 0:_event$data.type)==='social-login-success'){const{access_token,refresh_token}=event.data.data;if(access_token&&refresh_token){// 토큰 저장\nsetTokens(access_token,refresh_token);try{// 사용자 정보 가져오기 (새 토큰으로 프로필 조회)\nconst userData=await getProfile();// 로그인 상태 업데이트\nsetUser(userData);setIsAuthenticated(true);setError(null);// 필요시 성공 메시지 표시\nconsole.log('소셜 로그인 성공');}catch(profileError){console.error('로그인 후 프로필 로드 실패:',profileError);// 로그인 실패 처리 (토큰 제거)\nremoveTokens();setError('소셜 로그인 후 사용자 정보를 가져오는데 실패했습니다.');}}else{console.error('토큰 수신 실패:',event.data);setError('소셜 로그인 처리 중 오류가 발생했습니다.');}}},[]);// 소셜 로그인 메시지 이벤트 리스너 등록\nuseEffect(()=>{window.addEventListener('message',handleSocialLoginMessage);return()=>{window.removeEventListener('message',handleSocialLoginMessage);};},[handleSocialLoginMessage]);// 로그인 상태 확인 (앱 초기화 시 호출)\nuseEffect(()=>{const checkAuth=async()=>{setIsLoading(true);const{access}=getTokens();if(!access){setIsLoading(false);return;}try{const userData=await getProfile();setUser(userData);setIsAuthenticated(true);}catch(err){console.error('사용자 정보 가져오기 실패:',err);removeTokens();}finally{setIsLoading(false);}};checkAuth();},[]);// 컨텍스트에 제공할 값\nconst value={user,isAuthenticated,isLoading,error,login,logout,updateUserInfo,setError,handleSocialLoginMessage// 소셜 로그인 메시지 핸들러 노출 (필요시)\n};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// 인증 컨텍스트 사용을 위한 훅\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","getProfile","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","getTokens","access","localStorage","getItem","refresh","setTokens","setItem","removeTokens","removeItem","login","userData","logout","sessionStorage","clear","document","cookie","split","forEach","c","replace","Date","toUTCString","updateUserInfo","handleSocialLoginMessage","event","_event$data","API_URL","process","env","REACT_APP_API_URL","apiOrigin","NODE_ENV","origin","console","warn","data","type","access_token","refresh_token","log","profileError","window","addEventListener","removeEventListener","checkAuth","err","value","Provider","useAuth","context","Error"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\r\nimport { getProfile } from '../api/auth';\r\n\r\n// 인증 컨텍스트 생성\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 로컬 스토리지에서 토큰 가져오기\r\n  const getTokens = () => {\r\n    const access = localStorage.getItem('access_token');\r\n    const refresh = localStorage.getItem('refresh_token');\r\n    return { access, refresh };\r\n  };\r\n\r\n  // 토큰 저장하기\r\n  const setTokens = (access, refresh) => {\r\n    localStorage.setItem('access_token', access);\r\n    localStorage.setItem('refresh_token', refresh);\r\n  };\r\n\r\n  // 토큰 제거하기\r\n  const removeTokens = () => {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n  };\r\n\r\n  // 로그인 처리\r\n  const login = (access, refresh, userData) => {\r\n    setTokens(access, refresh);\r\n    setUser(userData);\r\n    setIsAuthenticated(true);\r\n    setError(null);\r\n  };\r\n\r\n  // 로그아웃 처리\r\n  const logout = () => {\r\n    removeTokens();\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    // 세션/로컬스토리지 추가 정리\r\n    sessionStorage.clear();\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    // 모든 쿠키 삭제 (간단 버전)\r\n    document.cookie.split(';').forEach(function(c) {\r\n      document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\r\n    });\r\n  };\r\n\r\n  // 사용자 정보 갱신\r\n  const updateUserInfo = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  // 소셜 로그인 메시지 핸들러\r\n  const handleSocialLoginMessage = useCallback(async (event) => {\r\n    // 오리진 체크 (실제 배포 시 API URL 도메인으로 변경 필요)\r\n    const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n    const apiOrigin = API_URL.split('/api')[0];\r\n    \r\n    // 개발 환경에서는 오리진 체크를 완화할 수 있음\r\n    if (process.env.NODE_ENV !== 'development' && event.origin !== apiOrigin) {\r\n      console.warn('오리진 불일치:', event.origin);\r\n      return;\r\n    }\r\n\r\n    if (event.data?.type === 'social-login-success') {\r\n      const { access_token, refresh_token } = event.data.data;\r\n\r\n      if (access_token && refresh_token) {\r\n        // 토큰 저장\r\n        setTokens(access_token, refresh_token);\r\n\r\n        try {\r\n          // 사용자 정보 가져오기 (새 토큰으로 프로필 조회)\r\n          const userData = await getProfile();\r\n          \r\n          // 로그인 상태 업데이트\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n          setError(null);\r\n          \r\n          // 필요시 성공 메시지 표시\r\n          console.log('소셜 로그인 성공');\r\n        } catch (profileError) {\r\n          console.error('로그인 후 프로필 로드 실패:', profileError);\r\n          \r\n          // 로그인 실패 처리 (토큰 제거)\r\n          removeTokens();\r\n          setError('소셜 로그인 후 사용자 정보를 가져오는데 실패했습니다.');\r\n        }\r\n      } else {\r\n        console.error('토큰 수신 실패:', event.data);\r\n        setError('소셜 로그인 처리 중 오류가 발생했습니다.');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // 소셜 로그인 메시지 이벤트 리스너 등록\r\n  useEffect(() => {\r\n    window.addEventListener('message', handleSocialLoginMessage);\r\n    return () => {\r\n      window.removeEventListener('message', handleSocialLoginMessage);\r\n    };\r\n  }, [handleSocialLoginMessage]);\r\n\r\n  // 로그인 상태 확인 (앱 초기화 시 호출)\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      setIsLoading(true);\r\n      const { access } = getTokens();\r\n      \r\n      if (!access) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const userData = await getProfile();\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n      } catch (err) {\r\n        console.error('사용자 정보 가져오기 실패:', err);\r\n        removeTokens();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    checkAuth();\r\n  }, []);\r\n\r\n  // 컨텍스트에 제공할 값\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    error,\r\n    login,\r\n    logout,\r\n    updateUserInfo,\r\n    setError,\r\n    handleSocialLoginMessage, // 소셜 로그인 메시지 핸들러 노출 (필요시)\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// 인증 컨텍스트 사용을 위한 훅\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}