{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './context/AuthContext';\nimport apiClient from './api/client'; // Axios 인스턴스 import\nimport { getProfile } from './api/auth';\nimport { toast } from 'react-toastify';\n\n/**\r\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\r\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\r\n */\nconst SocialLoginHandler = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  const navigate = useNavigate();\n\n  // 디버깅 함수\n  const debug = message => {\n    console.log(\"[SocialLoginHandler]\", message);\n  };\n\n  // useCallback으로 함수 메모이제이션\n  const handleMessage = useCallback(async event => {\n    var _event$data;\n    // 1) HMR 메시지 무시\n    if (((_event$data = event.data) === null || _event$data === void 0 ? void 0 : _event$data.type) === 'webpackOk') {\n      debug(\"HMR 메시지 무시\");\n      return;\n    }\n    // 2) 출처 확인\n    if (event.origin !== 'http://localhost:8000') {\n      debug(`허용되지 않은 오리진: ${event.origin}`);\n      return;\n    }\n    // 3) 메시지 타입 확인\n    const {\n      type,\n      payload\n    } = event.data || {};\n    if (type !== 'social-login-success') {\n      return;\n    }\n    debug(\"소셜 로그인 성공 메시지를 처리합니다\");\n    const {\n      access_token,\n      refresh_token,\n      user_email\n    } = payload || {};\n    debug(`사용자 이메일: ${user_email || '알 수 없음'}`);\n\n    // 토큰 유효성 검사\n    if (!access_token || !refresh_token) {\n      debug(\"토큰 정보가 누락되었습니다\");\n      toast.error(\"로그인 정보가 유효하지 않습니다\");\n      return;\n    }\n    debug(`토큰 정보 확인됨: ${access_token.substring(0, 10)}...`);\n    try {\n      // 1. 로컬 스토리지에 토큰 저장\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n      debug(\"토큰이 로컬 스토리지에 저장됨\");\n\n      // 2. API 클라이언트 인증 헤더 설정\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      debug(\"인증 헤더 설정 완료\");\n\n      // 3. 사용자 프로필 정보 가져오기\n      debug(\"사용자 프로필 요청 시작...\");\n      const userData = await getProfile();\n      debug(\"사용자 프로필 수신 성공:\", userData);\n\n      // 4. 인증 컨텍스트 업데이트\n      login(access_token, refresh_token, userData);\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n\n      // 5. 성공 메시지 표시\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`, {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n\n      // 6. 홈 페이지로 리다이렉트\n      debug(\"홈 페이지로 이동합니다\");\n      navigate('/', {\n        replace: true\n      });\n\n      // 7. 소셜 로그인 성공 이벤트 발생 (옵션)\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', {\n        detail: {\n          success: true,\n          provider: user_email ? user_email.split('@')[1] : 'unknown'\n        }\n      }));\n    } catch (error) {\n      console.error('소셜 로그인 처리 중 오류:', error);\n      debug(`오류 세부 정보: ${error.message}`);\n      if (error.response) {\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data)}`);\n      }\n      toast.error('로그인 처리 중 오류가 발생했습니다');\n\n      // 오류 발생 시 토큰 삭제\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      delete apiClient.defaults.headers.common['Authorization'];\n      navigate('/login');\n    }\n  }, [login, navigate]);\n\n  // 이벤트 리스너 등록 및 제거 (StrictMode 중복 방지)\n  const listenerRegistered = useRef(false);\n  useEffect(() => {\n    if (!listenerRegistered.current) {\n      debug(\"메시지 이벤트 리스너 등록\");\n      window.addEventListener('message', handleMessage);\n      listenerRegistered.current = true;\n    }\n    return () => {\n      if (listenerRegistered.current) {\n        debug(\"메시지 이벤트 리스너 제거\");\n        window.removeEventListener('message', handleMessage);\n        listenerRegistered.current = false;\n      }\n    };\n  }, [handleMessage]);\n  return null; // UI 렌더링 없음\n};\n_s(SocialLoginHandler, \"QnflKUeyfOu9AjSfiHXCjHyFTE4=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = SocialLoginHandler;\nexport default SocialLoginHandler;\nvar _c;\n$RefreshReg$(_c, \"SocialLoginHandler\");","map":{"version":3,"names":["useEffect","useCallback","useRef","useNavigate","useAuth","apiClient","getProfile","toast","SocialLoginHandler","_s","login","navigate","debug","message","console","log","handleMessage","event","_event$data","data","type","origin","payload","access_token","refresh_token","user_email","error","substring","localStorage","setItem","defaults","headers","common","userData","success","name","email","position","autoClose","replace","window","dispatchEvent","CustomEvent","detail","provider","split","response","status","JSON","stringify","removeItem","listenerRegistered","current","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/SocialLoginHandler.js"],"sourcesContent":["import { useEffect, useCallback, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from './context/AuthContext';\r\nimport apiClient from './api/client'; // Axios 인스턴스 import\r\nimport { getProfile } from './api/auth';\r\nimport { toast } from 'react-toastify';\r\n\r\n/**\r\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\r\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\r\n */\r\nconst SocialLoginHandler = () => {\r\n  const { login } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  // 디버깅 함수\r\n  const debug = (message) => {\r\n    console.log(\"[SocialLoginHandler]\", message);\r\n  };\r\n\r\n  // useCallback으로 함수 메모이제이션\r\n  const handleMessage = useCallback(async (event) => {\r\n    // 1) HMR 메시지 무시\r\n    if (event.data?.type === 'webpackOk') {\r\n      debug(\"HMR 메시지 무시\");\r\n      return;\r\n    }\r\n    // 2) 출처 확인\r\n    if (event.origin !== 'http://localhost:8000') {\r\n      debug(`허용되지 않은 오리진: ${event.origin}`);\r\n      return;\r\n    }\r\n    // 3) 메시지 타입 확인\r\n    const { type, payload } = event.data || {};\r\n    if (type !== 'social-login-success') {\r\n      return;\r\n    }\r\n    debug(\"소셜 로그인 성공 메시지를 처리합니다\");\r\n    const { access_token, refresh_token, user_email } = payload || {};\r\n    debug(`사용자 이메일: ${user_email || '알 수 없음'}`);\r\n    \r\n    // 토큰 유효성 검사\r\n    if (!access_token || !refresh_token) {\r\n      debug(\"토큰 정보가 누락되었습니다\");\r\n      toast.error(\"로그인 정보가 유효하지 않습니다\");\r\n      return;\r\n    }\r\n\r\n    debug(`토큰 정보 확인됨: ${access_token.substring(0, 10)}...`);\r\n    \r\n    try {\r\n      // 1. 로컬 스토리지에 토큰 저장\r\n      localStorage.setItem('access_token', access_token);\r\n      localStorage.setItem('refresh_token', refresh_token);\r\n      debug(\"토큰이 로컬 스토리지에 저장됨\");\r\n      \r\n      // 2. API 클라이언트 인증 헤더 설정\r\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n      debug(\"인증 헤더 설정 완료\");\r\n      \r\n      // 3. 사용자 프로필 정보 가져오기\r\n      debug(\"사용자 프로필 요청 시작...\");\r\n      const userData = await getProfile();\r\n      debug(\"사용자 프로필 수신 성공:\", userData);\r\n      \r\n      // 4. 인증 컨텍스트 업데이트\r\n      login(access_token, refresh_token, userData);\r\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\r\n      \r\n      // 5. 성공 메시지 표시\r\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`, {\r\n        position: \"top-center\",\r\n        autoClose: 3000\r\n      });\r\n      \r\n      // 6. 홈 페이지로 리다이렉트\r\n      debug(\"홈 페이지로 이동합니다\");\r\n      navigate('/', { replace: true });\r\n      \r\n      // 7. 소셜 로그인 성공 이벤트 발생 (옵션)\r\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', { \r\n        detail: { success: true, provider: user_email ? user_email.split('@')[1] : 'unknown' } \r\n      }));\r\n      \r\n    } catch (error) {\r\n      console.error('소셜 로그인 처리 중 오류:', error);\r\n      debug(`오류 세부 정보: ${error.message}`);\r\n      \r\n      if (error.response) {\r\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data)}`);\r\n      }\r\n      \r\n      toast.error('로그인 처리 중 오류가 발생했습니다');\r\n      \r\n      // 오류 발생 시 토큰 삭제\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('refresh_token');\r\n      delete apiClient.defaults.headers.common['Authorization'];\r\n      \r\n      navigate('/login');\r\n    }\r\n  }, [login, navigate]);\r\n\r\n  // 이벤트 리스너 등록 및 제거 (StrictMode 중복 방지)\r\n  const listenerRegistered = useRef(false);\r\n  useEffect(() => {\r\n    if (!listenerRegistered.current) {\r\n      debug(\"메시지 이벤트 리스너 등록\");\r\n      window.addEventListener('message', handleMessage);\r\n      listenerRegistered.current = true;\r\n    }\r\n    return () => {\r\n      if (listenerRegistered.current) {\r\n        debug(\"메시지 이벤트 리스너 제거\");\r\n        window.removeEventListener('message', handleMessage);\r\n        listenerRegistered.current = false;\r\n      }\r\n    };\r\n  }, [handleMessage]);\r\n\r\n  return null; // UI 렌더링 없음\r\n};\r\n\r\nexport default SocialLoginHandler;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}