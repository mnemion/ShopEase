{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\COM-LM\\\\Documents\\\\ShopEase\\\\frontend\\\\src\\\\pages\\\\SocialLoginCallback.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { sendCodeToBackend } from '../api/auth';\nimport Loading from '../components/ui/Loading';\nimport { toast } from 'react-toastify';\n\n/**\n * 소셜 로그인 콜백 처리 컴포넌트\n * URL 파라미터로 전달된 토큰을 처리 (팝업 방식이 실패할 경우 대체 방안)\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocialLoginCallback = () => {\n  _s();\n  const {\n    provider\n  } = useParams(); // 라우트에서 provider 추출 (예: /login/callback/:provider)\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    login: authLogin\n  } = useAuth();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const handleCallback = async () => {\n      console.log(`[SocialLoginCallback] 콜백 처리 시작 - 제공자: ${provider || '알 수 없음'}`);\n      console.log(`[SocialLoginCallback] 현재 URL: ${window.location.href}`);\n      console.log(`[SocialLoginCallback] 쿼리 문자열: ${location.search}`);\n      const searchParams = new URLSearchParams(location.search);\n      const code = searchParams.get('code');\n      const state = searchParams.get('state');\n      const errorParam = searchParams.get('error');\n      const errorDescription = searchParams.get('error_description');\n      console.log(`[SocialLoginCallback] 수신된 파라미터:`, {\n        code: code ? `${code.substring(0, 10)}...` : '없음',\n        state: state || '없음',\n        error: errorParam || '없음',\n        errorDescription: errorDescription || '없음'\n      });\n\n      // 에러 파라미터 확인 (사용자가 거부 등)\n      if (errorParam) {\n        console.error(`[SocialLoginCallback] 소셜 로그인 오류: ${errorParam} - ${errorDescription}`);\n        setError(`로그인 중 오류 발생: ${errorDescription || errorParam}`);\n        toast.error(`로그인 중 오류 발생: ${errorDescription || errorParam}`);\n        setIsLoading(false);\n        return;\n      }\n\n      // code 파라미터 확인\n      if (!code) {\n        console.error('[SocialLoginCallback] 인증 코드가 URL에 없음');\n        setError('로그인 인증 코드를 받지 못했습니다.');\n        toast.error('로그인 인증 코드를 받지 못했습니다.');\n        setIsLoading(false);\n        return;\n      }\n\n      // state 파라미터 검증 (CSRF 방지)\n      const storedState = sessionStorage.getItem('oauth_state');\n      console.log(`[SocialLoginCallback] State 검증: 받은 state=${state}, 저장된 state=${storedState}`);\n      if (!state || state !== storedState) {\n        console.error('[SocialLoginCallback] 유효하지 않은 state 파라미터');\n        sessionStorage.removeItem('oauth_state'); // 사용된 state 제거\n        setError('로그인 요청이 유효하지 않습니다 (state 불일치).');\n        toast.error('로그인 요청이 유효하지 않습니다.');\n        setIsLoading(false);\n        return;\n      }\n      sessionStorage.removeItem('oauth_state'); // 사용된 state 제거\n\n      // 백엔드로 code 전송\n      try {\n        console.log(`[SocialLoginCallback] 백엔드로 code 전송 시작`);\n        // sendCodeToBackend 함수는 { access, refresh, user } 를 반환하도록 수정됨\n        const {\n          access,\n          refresh,\n          user\n        } = await sendCodeToBackend(provider, code);\n        console.log(`[SocialLoginCallback] 백엔드 응답 성공:`, {\n          accessToken: access ? '존재함' : '없음',\n          refreshToken: refresh ? '존재함' : '없음',\n          user: user ? user.email : '없음'\n        });\n        if (access && refresh && user) {\n          // 로그인 처리 (useAuth 훅 사용)\n          console.log(`[SocialLoginCallback] 로그인 처리 시작`);\n          authLogin(access, refresh, user);\n          toast.success(`${user.name || user.email || '사용자'}님, 환영합니다!`);\n          console.log(`[SocialLoginCallback] 홈으로 이동`);\n          navigate('/', {\n            replace: true\n          }); // 성공 시 홈으로 이동\n        } else {\n          throw new Error('백엔드로부터 유효한 토큰 또는 사용자 정보를 받지 못했습니다.');\n        }\n      } catch (err) {\n        console.error(`[SocialLoginCallback] 소셜 로그인 처리 실패:`, err);\n        if (err.response) {\n          console.error('[SocialLoginCallback] 백엔드 응답 오류:', err.response.data);\n          console.error('[SocialLoginCallback] 상태 코드:', err.response.status);\n        }\n        setError('로그인 처리 중 오류가 발생했습니다.');\n        toast.error('로그인 처리 중 오류가 발생했습니다.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    handleCallback();\n  }, [provider, location.search, navigate, authLogin]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {\n      text: \"\\uB85C\\uADF8\\uC778 \\uCC98\\uB9AC \\uC911...\",\n      fullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600 mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/login'),\n        className: \"text-indigo-600 hover:underline\",\n        children: \"\\uB85C\\uADF8\\uC778 \\uD398\\uC774\\uC9C0\\uB85C \\uB3CC\\uC544\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 8\n    }, this);\n  }\n\n  // 일반적으로 로딩 후에는 리다이렉트되므로 이 부분은 보이지 않음\n  return null;\n};\n_s(SocialLoginCallback, \"ss9/fgicaAdUryu2zK0Wv5ZZTyA=\", false, function () {\n  return [useParams, useLocation, useNavigate, useAuth];\n});\n_c = SocialLoginCallback;\nexport default SocialLoginCallback;\nvar _c;\n$RefreshReg$(_c, \"SocialLoginCallback\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","useLocation","useAuth","sendCodeToBackend","Loading","toast","jsxDEV","_jsxDEV","SocialLoginCallback","_s","provider","location","navigate","login","authLogin","error","setError","isLoading","setIsLoading","handleCallback","console","log","window","href","search","searchParams","URLSearchParams","code","get","state","errorParam","errorDescription","substring","storedState","sessionStorage","getItem","removeItem","access","refresh","user","accessToken","refreshToken","email","success","name","replace","Error","err","response","data","status","text","fullScreen","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","_c","$RefreshReg$"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/pages/SocialLoginCallback.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { sendCodeToBackend } from '../api/auth';\nimport Loading from '../components/ui/Loading';\nimport { toast } from 'react-toastify';\n\n/**\n * 소셜 로그인 콜백 처리 컴포넌트\n * URL 파라미터로 전달된 토큰을 처리 (팝업 방식이 실패할 경우 대체 방안)\n */\nconst SocialLoginCallback = () => {\n  const { provider } = useParams(); // 라우트에서 provider 추출 (예: /login/callback/:provider)\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { login: authLogin } = useAuth();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const handleCallback = async () => {\n      console.log(`[SocialLoginCallback] 콜백 처리 시작 - 제공자: ${provider || '알 수 없음'}`);\n      console.log(`[SocialLoginCallback] 현재 URL: ${window.location.href}`);\n      console.log(`[SocialLoginCallback] 쿼리 문자열: ${location.search}`);\n      \n      const searchParams = new URLSearchParams(location.search);\n      const code = searchParams.get('code');\n      const state = searchParams.get('state');\n      const errorParam = searchParams.get('error');\n      const errorDescription = searchParams.get('error_description');\n\n      console.log(`[SocialLoginCallback] 수신된 파라미터:`, {\n        code: code ? `${code.substring(0, 10)}...` : '없음',\n        state: state || '없음',\n        error: errorParam || '없음',\n        errorDescription: errorDescription || '없음'\n      });\n\n      // 에러 파라미터 확인 (사용자가 거부 등)\n      if (errorParam) {\n        console.error(`[SocialLoginCallback] 소셜 로그인 오류: ${errorParam} - ${errorDescription}`);\n        setError(`로그인 중 오류 발생: ${errorDescription || errorParam}`);\n        toast.error(`로그인 중 오류 발생: ${errorDescription || errorParam}`);\n        setIsLoading(false);\n        return;\n      }\n\n      // code 파라미터 확인\n      if (!code) {\n        console.error('[SocialLoginCallback] 인증 코드가 URL에 없음');\n        setError('로그인 인증 코드를 받지 못했습니다.');\n        toast.error('로그인 인증 코드를 받지 못했습니다.');\n        setIsLoading(false);\n        return;\n      }\n\n      // state 파라미터 검증 (CSRF 방지)\n      const storedState = sessionStorage.getItem('oauth_state');\n      console.log(`[SocialLoginCallback] State 검증: 받은 state=${state}, 저장된 state=${storedState}`);\n      \n      if (!state || state !== storedState) {\n        console.error('[SocialLoginCallback] 유효하지 않은 state 파라미터');\n        sessionStorage.removeItem('oauth_state'); // 사용된 state 제거\n        setError('로그인 요청이 유효하지 않습니다 (state 불일치).');\n        toast.error('로그인 요청이 유효하지 않습니다.');\n        setIsLoading(false);\n        return;\n      }\n      sessionStorage.removeItem('oauth_state'); // 사용된 state 제거\n\n      // 백엔드로 code 전송\n      try {\n        console.log(`[SocialLoginCallback] 백엔드로 code 전송 시작`);\n        // sendCodeToBackend 함수는 { access, refresh, user } 를 반환하도록 수정됨\n        const { access, refresh, user } = await sendCodeToBackend(provider, code);\n        console.log(`[SocialLoginCallback] 백엔드 응답 성공:`, {\n          accessToken: access ? '존재함' : '없음',\n          refreshToken: refresh ? '존재함' : '없음',\n          user: user ? user.email : '없음'\n        });\n\n        if (access && refresh && user) {\n          // 로그인 처리 (useAuth 훅 사용)\n          console.log(`[SocialLoginCallback] 로그인 처리 시작`);\n          authLogin(access, refresh, user);\n          toast.success(`${user.name || user.email || '사용자'}님, 환영합니다!`);\n          console.log(`[SocialLoginCallback] 홈으로 이동`);\n          navigate('/', { replace: true }); // 성공 시 홈으로 이동\n        } else {\n          throw new Error('백엔드로부터 유효한 토큰 또는 사용자 정보를 받지 못했습니다.');\n        }\n      } catch (err) {\n        console.error(`[SocialLoginCallback] 소셜 로그인 처리 실패:`, err);\n        if (err.response) {\n          console.error('[SocialLoginCallback] 백엔드 응답 오류:', err.response.data);\n          console.error('[SocialLoginCallback] 상태 코드:', err.response.status);\n        }\n        setError('로그인 처리 중 오류가 발생했습니다.');\n        toast.error('로그인 처리 중 오류가 발생했습니다.');\n      } finally {\n         setIsLoading(false);\n      }\n    };\n\n    handleCallback();\n  }, [provider, location.search, navigate, authLogin]);\n\n  if (isLoading) {\n    return <Loading text=\"로그인 처리 중...\" fullScreen />;\n  }\n\n  if (error) {\n     return (\n       <div className=\"flex flex-col items-center justify-center h-screen\">\n         <p className=\"text-red-600 mb-4\">{error}</p>\n         <button onClick={() => navigate('/login')} className=\"text-indigo-600 hover:underline\">\n           로그인 페이지로 돌아가기\n         </button>\n       </div>\n     );\n  }\n\n  // 일반적으로 로딩 후에는 리다이렉트되므로 이 부분은 보이지 않음\n  return null;\n};\n\nexport default SocialLoginCallback;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AACtE,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,iBAAiB,QAAQ,aAAa;AAC/C,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC;EAAS,CAAC,GAAGX,SAAS,CAAC,CAAC,CAAC,CAAC;EAClC,MAAMY,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEa,KAAK,EAAEC;EAAU,CAAC,GAAGZ,OAAO,CAAC,CAAC;EACtC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMsB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjCC,OAAO,CAACC,GAAG,CAAC,yCAAyCX,QAAQ,IAAI,QAAQ,EAAE,CAAC;MAC5EU,OAAO,CAACC,GAAG,CAAC,iCAAiCC,MAAM,CAACX,QAAQ,CAACY,IAAI,EAAE,CAAC;MACpEH,OAAO,CAACC,GAAG,CAAC,iCAAiCV,QAAQ,CAACa,MAAM,EAAE,CAAC;MAE/D,MAAMC,YAAY,GAAG,IAAIC,eAAe,CAACf,QAAQ,CAACa,MAAM,CAAC;MACzD,MAAMG,IAAI,GAAGF,YAAY,CAACG,GAAG,CAAC,MAAM,CAAC;MACrC,MAAMC,KAAK,GAAGJ,YAAY,CAACG,GAAG,CAAC,OAAO,CAAC;MACvC,MAAME,UAAU,GAAGL,YAAY,CAACG,GAAG,CAAC,OAAO,CAAC;MAC5C,MAAMG,gBAAgB,GAAGN,YAAY,CAACG,GAAG,CAAC,mBAAmB,CAAC;MAE9DR,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE;QAC7CM,IAAI,EAAEA,IAAI,GAAG,GAAGA,IAAI,CAACK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,GAAG,IAAI;QACjDH,KAAK,EAAEA,KAAK,IAAI,IAAI;QACpBd,KAAK,EAAEe,UAAU,IAAI,IAAI;QACzBC,gBAAgB,EAAEA,gBAAgB,IAAI;MACxC,CAAC,CAAC;;MAEF;MACA,IAAID,UAAU,EAAE;QACdV,OAAO,CAACL,KAAK,CAAC,oCAAoCe,UAAU,MAAMC,gBAAgB,EAAE,CAAC;QACrFf,QAAQ,CAAC,gBAAgBe,gBAAgB,IAAID,UAAU,EAAE,CAAC;QAC1DzB,KAAK,CAACU,KAAK,CAAC,gBAAgBgB,gBAAgB,IAAID,UAAU,EAAE,CAAC;QAC7DZ,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;;MAEA;MACA,IAAI,CAACS,IAAI,EAAE;QACTP,OAAO,CAACL,KAAK,CAAC,sCAAsC,CAAC;QACrDC,QAAQ,CAAC,sBAAsB,CAAC;QAChCX,KAAK,CAACU,KAAK,CAAC,sBAAsB,CAAC;QACnCG,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;;MAEA;MACA,MAAMe,WAAW,GAAGC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;MACzDf,OAAO,CAACC,GAAG,CAAC,4CAA4CQ,KAAK,eAAeI,WAAW,EAAE,CAAC;MAE1F,IAAI,CAACJ,KAAK,IAAIA,KAAK,KAAKI,WAAW,EAAE;QACnCb,OAAO,CAACL,KAAK,CAAC,0CAA0C,CAAC;QACzDmB,cAAc,CAACE,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;QAC1CpB,QAAQ,CAAC,gCAAgC,CAAC;QAC1CX,KAAK,CAACU,KAAK,CAAC,oBAAoB,CAAC;QACjCG,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;MACAgB,cAAc,CAACE,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;;MAE1C;MACA,IAAI;QACFhB,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACpD;QACA,MAAM;UAAEgB,MAAM;UAAEC,OAAO;UAAEC;QAAK,CAAC,GAAG,MAAMpC,iBAAiB,CAACO,QAAQ,EAAEiB,IAAI,CAAC;QACzEP,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE;UAC9CmB,WAAW,EAAEH,MAAM,GAAG,KAAK,GAAG,IAAI;UAClCI,YAAY,EAAEH,OAAO,GAAG,KAAK,GAAG,IAAI;UACpCC,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAACG,KAAK,GAAG;QAC5B,CAAC,CAAC;QAEF,IAAIL,MAAM,IAAIC,OAAO,IAAIC,IAAI,EAAE;UAC7B;UACAnB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;UAC9CP,SAAS,CAACuB,MAAM,EAAEC,OAAO,EAAEC,IAAI,CAAC;UAChClC,KAAK,CAACsC,OAAO,CAAC,GAAGJ,IAAI,CAACK,IAAI,IAAIL,IAAI,CAACG,KAAK,IAAI,KAAK,WAAW,CAAC;UAC7DtB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;UAC3CT,QAAQ,CAAC,GAAG,EAAE;YAAEiC,OAAO,EAAE;UAAK,CAAC,CAAC,CAAC,CAAC;QACpC,CAAC,MAAM;UACL,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;QACvD;MACF,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ3B,OAAO,CAACL,KAAK,CAAC,qCAAqC,EAAEgC,GAAG,CAAC;QACzD,IAAIA,GAAG,CAACC,QAAQ,EAAE;UAChB5B,OAAO,CAACL,KAAK,CAAC,kCAAkC,EAAEgC,GAAG,CAACC,QAAQ,CAACC,IAAI,CAAC;UACpE7B,OAAO,CAACL,KAAK,CAAC,8BAA8B,EAAEgC,GAAG,CAACC,QAAQ,CAACE,MAAM,CAAC;QACpE;QACAlC,QAAQ,CAAC,sBAAsB,CAAC;QAChCX,KAAK,CAACU,KAAK,CAAC,sBAAsB,CAAC;MACrC,CAAC,SAAS;QACPG,YAAY,CAAC,KAAK,CAAC;MACtB;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACT,QAAQ,EAAEC,QAAQ,CAACa,MAAM,EAAEZ,QAAQ,EAAEE,SAAS,CAAC,CAAC;EAEpD,IAAIG,SAAS,EAAE;IACb,oBAAOV,OAAA,CAACH,OAAO;MAAC+C,IAAI,EAAC,2CAAa;MAACC,UAAU;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAClD;EAEA,IAAIzC,KAAK,EAAE;IACR,oBACER,OAAA;MAAKkD,SAAS,EAAC,oDAAoD;MAAAC,QAAA,gBACjEnD,OAAA;QAAGkD,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAE3C;MAAK;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5CjD,OAAA;QAAQoD,OAAO,EAAEA,CAAA,KAAM/C,QAAQ,CAAC,QAAQ,CAAE;QAAC6C,SAAS,EAAC,iCAAiC;QAAAC,QAAA,EAAC;MAEvF;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEX;;EAEA;EACA,OAAO,IAAI;AACb,CAAC;AAAC/C,EAAA,CAjHID,mBAAmB;EAAA,QACFT,SAAS,EACbE,WAAW,EACXD,WAAW,EACCE,OAAO;AAAA;AAAA0D,EAAA,GAJhCpD,mBAAmB;AAmHzB,eAAeA,mBAAmB;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}