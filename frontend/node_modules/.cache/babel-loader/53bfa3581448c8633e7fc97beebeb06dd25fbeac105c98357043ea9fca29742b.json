{"ast":null,"code":"import apiClient from './client';\n\n// 회원가입 API\nexport const register = async userData => {\n  const response = await apiClient.post('/users/register/', userData);\n  return response.data;\n};\n\n// 로그인 API\nexport const login = async credentials => {\n  const response = await apiClient.post('/users/login/', credentials);\n  return response.data;\n};\n\n// 로그아웃 API\nexport const logout = async refreshToken => {\n  const response = await apiClient.post('/users/logout/', {\n    refresh: refreshToken\n  });\n  return response.data;\n};\n\n// 내 정보 조회 API\nexport const getProfile = async () => {\n  try {\n    const response = await apiClient.get('/users/users/me/');\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch profile:', error);\n    throw error;\n  }\n};\n\n// 내 정보 수정 API\nexport const updateProfile = async profileData => {\n  const response = await apiClient.put('/users/me/', profileData);\n  return response.data;\n};\n\n// 배송지 목록 조회 API\nexport const getAddresses = async () => {\n  const response = await apiClient.get('/users/addresses/');\n  return response.data;\n};\n\n// 배송지 추가 API\nexport const addAddress = async addressData => {\n  const response = await apiClient.post('/users/addresses/', addressData);\n  return response.data;\n};\n\n// 배송지 수정 API\nexport const updateAddress = async (id, addressData) => {\n  const response = await apiClient.put(`/users/addresses/${id}/`, addressData);\n  return response.data;\n};\n\n// 배송지 삭제 API\nexport const deleteAddress = async id => {\n  const response = await apiClient.delete(`/users/addresses/${id}/`);\n  return response.data;\n};\n\n// Naver 인증 페이지 URL 생성 (다른 Provider도 유사하게)\nconst getNaverAuthUrl = () => {\n  const NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_CLIENT_ID;\n  const REDIRECT_URI = `${window.location.origin}/login/callback/naver`;\n  const STATE = Math.random().toString(36).substring(2);\n  sessionStorage.setItem('oauth_state', STATE);\n  const params = new URLSearchParams({\n    response_type: 'code',\n    client_id: NAVER_CLIENT_ID,\n    redirect_uri: REDIRECT_URI,\n    state: STATE\n  });\n  return `https://nid.naver.com/oauth2.0/authorize?${params.toString()}`;\n};\nconst getGoogleAuthUrl = () => {\n  const GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n  const REDIRECT_URI = `${window.location.origin}/login/callback/google`;\n  const STATE = Math.random().toString(36).substring(2);\n  sessionStorage.setItem('oauth_state', STATE);\n  const params = new URLSearchParams({\n    response_type: 'code',\n    client_id: GOOGLE_CLIENT_ID,\n    redirect_uri: REDIRECT_URI,\n    scope: 'openid email profile',\n    state: STATE,\n    access_type: 'online',\n    prompt: 'select_account'\n  });\n  return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n};\nconst getKakaoAuthUrl = () => {\n  const KAKAO_CLIENT_ID = process.env.REACT_APP_KAKAO_CLIENT_ID;\n  const REDIRECT_URI = `${window.location.origin}/login/callback/kakao`;\n  const STATE = Math.random().toString(36).substring(2);\n  sessionStorage.setItem('oauth_state', STATE);\n  const params = new URLSearchParams({\n    response_type: 'code',\n    client_id: KAKAO_CLIENT_ID,\n    redirect_uri: REDIRECT_URI,\n    state: STATE\n  });\n  return `https://kauth.kakao.com/oauth/authorize?${params.toString()}`;\n};\n\n// 소셜 로그인을 위한 팝업 열기 (Provider 인증 URL 직접 호출)\nexport const openSocialLoginPopup = provider => {\n  let url;\n  if (provider === 'naver') {\n    url = getNaverAuthUrl();\n  } else if (provider === 'google') {\n    url = getGoogleAuthUrl();\n  } else if (provider === 'kakao') {\n    url = getKakaoAuthUrl();\n  } else {\n    console.error(`지원하지 않는 Provider: ${provider}`);\n    return null;\n  }\n  console.log(`[openSocialLoginPopup] Opening popup for ${provider} with URL: ${url}`);\n  const width = 600;\n  const height = 700;\n  const left = window.screen.width / 2 - width / 2;\n  const top = window.screen.height / 2 - height / 2;\n  const popupName = `${provider}Login_${new Date().getTime()}`;\n  const popup = window.open(url, popupName, `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=no, copyhistory=no, width=${width}, height=${height}, top=${top}, left=${left}`);\n  if (!popup || popup.closed || typeof popup.closed === 'undefined') {\n    console.error('[openSocialLoginPopup] 팝업이 차단되었습니다.');\n    alert('팝업이 차단되었습니다. 팝업 차단을 해제한 후 다시 시도해주세요.');\n    return null;\n  }\n  popup.focus();\n  return popup;\n};\n\n// 프론트엔드 콜백에서 받은 code를 백엔드로 전송하는 함수\nexport const sendCodeToBackend = async (provider, code) => {\n  try {\n    console.log(`[sendCodeToBackend] Sending code for ${provider} to backend...`);\n    // 백엔드의 dj-rest-auth 엔드포인트 호출 (예: /api/auth/naver/)\n    const response = await apiClient.post(`/auth/${provider}/`, {\n      code\n    });\n    console.log(`[sendCodeToBackend] Backend response for ${provider}:`, response.data);\n    return response.data; // { access, refresh, user } 객체 반환 예상\n  } catch (error) {\n    console.error(`[sendCodeToBackend] Failed to process code for ${provider}:`, error);\n    if (error.response) {\n      console.error(\"Backend error details:\", error.response.data);\n    }\n    throw error; // 에러를 다시 던져서 호출한 쪽에서 처리하도록 함\n  }\n};","map":{"version":3,"names":["apiClient","register","userData","response","post","data","login","credentials","logout","refreshToken","refresh","getProfile","get","error","console","updateProfile","profileData","put","getAddresses","addAddress","addressData","updateAddress","id","deleteAddress","delete","getNaverAuthUrl","NAVER_CLIENT_ID","process","env","REACT_APP_NAVER_CLIENT_ID","REDIRECT_URI","window","location","origin","STATE","Math","random","toString","substring","sessionStorage","setItem","params","URLSearchParams","response_type","client_id","redirect_uri","state","getGoogleAuthUrl","GOOGLE_CLIENT_ID","REACT_APP_GOOGLE_CLIENT_ID","scope","access_type","prompt","getKakaoAuthUrl","KAKAO_CLIENT_ID","REACT_APP_KAKAO_CLIENT_ID","openSocialLoginPopup","provider","url","log","width","height","left","screen","top","popupName","Date","getTime","popup","open","closed","alert","focus","sendCodeToBackend","code"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/api/auth.js"],"sourcesContent":["import apiClient from './client';\r\n\r\n// 회원가입 API\r\nexport const register = async (userData) => {\r\n  const response = await apiClient.post('/users/register/', userData);\r\n  return response.data;\r\n};\r\n\r\n// 로그인 API\r\nexport const login = async (credentials) => {\r\n  const response = await apiClient.post('/users/login/', credentials);\r\n  return response.data;\r\n};\r\n\r\n// 로그아웃 API\r\nexport const logout = async (refreshToken) => {\r\n  const response = await apiClient.post('/users/logout/', { refresh: refreshToken });\r\n  return response.data;\r\n};\r\n\r\n// 내 정보 조회 API\r\nexport const getProfile = async () => {\r\n  try {\r\n    const response = await apiClient.get('/users/users/me/');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Failed to fetch profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 내 정보 수정 API\r\nexport const updateProfile = async (profileData) => {\r\n  const response = await apiClient.put('/users/me/', profileData);\r\n  return response.data;\r\n};\r\n\r\n// 배송지 목록 조회 API\r\nexport const getAddresses = async () => {\r\n  const response = await apiClient.get('/users/addresses/');\r\n  return response.data;\r\n};\r\n\r\n// 배송지 추가 API\r\nexport const addAddress = async (addressData) => {\r\n  const response = await apiClient.post('/users/addresses/', addressData);\r\n  return response.data;\r\n};\r\n\r\n// 배송지 수정 API\r\nexport const updateAddress = async (id, addressData) => {\r\n  const response = await apiClient.put(`/users/addresses/${id}/`, addressData);\r\n  return response.data;\r\n};\r\n\r\n// 배송지 삭제 API\r\nexport const deleteAddress = async (id) => {\r\n  const response = await apiClient.delete(`/users/addresses/${id}/`);\r\n  return response.data;\r\n};\r\n\r\n// Naver 인증 페이지 URL 생성 (다른 Provider도 유사하게)\r\nconst getNaverAuthUrl = () => {\r\n  const NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_CLIENT_ID;\r\n  const REDIRECT_URI = `${window.location.origin}/login/callback/naver`;\r\n  const STATE = Math.random().toString(36).substring(2);\r\n  sessionStorage.setItem('oauth_state', STATE);\r\n  const params = new URLSearchParams({\r\n    response_type: 'code',\r\n    client_id: NAVER_CLIENT_ID,\r\n    redirect_uri: REDIRECT_URI,\r\n    state: STATE,\r\n  });\r\n  return `https://nid.naver.com/oauth2.0/authorize?${params.toString()}`;\r\n};\r\n\r\nconst getGoogleAuthUrl = () => {\r\n  const GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;\r\n  const REDIRECT_URI = `${window.location.origin}/login/callback/google`;\r\n  const STATE = Math.random().toString(36).substring(2);\r\n  sessionStorage.setItem('oauth_state', STATE);\r\n  const params = new URLSearchParams({\r\n    response_type: 'code',\r\n    client_id: GOOGLE_CLIENT_ID,\r\n    redirect_uri: REDIRECT_URI,\r\n    scope: 'openid email profile',\r\n    state: STATE,\r\n    access_type: 'online',\r\n    prompt: 'select_account',\r\n  });\r\n  return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\r\n};\r\n\r\nconst getKakaoAuthUrl = () => {\r\n  const KAKAO_CLIENT_ID = process.env.REACT_APP_KAKAO_CLIENT_ID;\r\n  const REDIRECT_URI = `${window.location.origin}/login/callback/kakao`;\r\n  const STATE = Math.random().toString(36).substring(2);\r\n  sessionStorage.setItem('oauth_state', STATE);\r\n  const params = new URLSearchParams({\r\n    response_type: 'code',\r\n    client_id: KAKAO_CLIENT_ID,\r\n    redirect_uri: REDIRECT_URI,\r\n    state: STATE,\r\n  });\r\n  return `https://kauth.kakao.com/oauth/authorize?${params.toString()}`;\r\n};\r\n\r\n// 소셜 로그인을 위한 팝업 열기 (Provider 인증 URL 직접 호출)\r\nexport const openSocialLoginPopup = (provider) => {\r\n  let url;\r\n  if (provider === 'naver') {\r\n    url = getNaverAuthUrl();\r\n  } else if (provider === 'google') {\r\n    url = getGoogleAuthUrl();\r\n  } else if (provider === 'kakao') {\r\n    url = getKakaoAuthUrl();\r\n  } else {\r\n    console.error(`지원하지 않는 Provider: ${provider}`);\r\n    return null;\r\n  }\r\n\r\n  console.log(`[openSocialLoginPopup] Opening popup for ${provider} with URL: ${url}`);\r\n\r\n  const width = 600;\r\n  const height = 700;\r\n  const left = window.screen.width / 2 - width / 2;\r\n  const top = window.screen.height / 2 - height / 2;\r\n  const popupName = `${provider}Login_${new Date().getTime()}`;\r\n\r\n  const popup = window.open(\r\n    url,\r\n    popupName,\r\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=no, copyhistory=no, width=${width}, height=${height}, top=${top}, left=${left}`\r\n  );\r\n\r\n  if (!popup || popup.closed || typeof popup.closed === 'undefined') {\r\n    console.error('[openSocialLoginPopup] 팝업이 차단되었습니다.');\r\n    alert('팝업이 차단되었습니다. 팝업 차단을 해제한 후 다시 시도해주세요.');\r\n    return null;\r\n  }\r\n  popup.focus();\r\n  return popup;\r\n};\r\n\r\n// 프론트엔드 콜백에서 받은 code를 백엔드로 전송하는 함수\r\nexport const sendCodeToBackend = async (provider, code) => {\r\n  try {\r\n    console.log(`[sendCodeToBackend] Sending code for ${provider} to backend...`);\r\n    // 백엔드의 dj-rest-auth 엔드포인트 호출 (예: /api/auth/naver/)\r\n    const response = await apiClient.post(`/auth/${provider}/`, { code });\r\n    console.log(`[sendCodeToBackend] Backend response for ${provider}:`, response.data);\r\n    return response.data; // { access, refresh, user } 객체 반환 예상\r\n  } catch (error) {\r\n    console.error(`[sendCodeToBackend] Failed to process code for ${provider}:`, error);\r\n    if (error.response) {\r\n      console.error(\"Backend error details:\", error.response.data);\r\n    }\r\n    throw error; // 에러를 다시 던져서 호출한 쪽에서 처리하도록 함\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}