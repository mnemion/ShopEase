{"ast":null,"code":"import{useEffect,useCallback,useRef,useState}from'react';import{useNavigate}from'react-router-dom';import{useAuth}from'./context/AuthContext';import apiClient from'./api/client';// Axios 인스턴스 import\nimport{getProfile}from'./api/auth';import{toast}from'react-toastify';/**\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\n */const SocialLoginHandler=()=>{const{login,isAuthenticated}=useAuth();const navigate=useNavigate();const[lastChecked,setLastChecked]=useState(0);const checkInterval=useRef(null);// 디버깅 함수\nconst debug=message=>{console.log(\"[SocialLoginHandler]\",message);};// 로컬 스토리지에서 토큰 처리\nconst processLocalStorageTokens=useCallback(async()=>{debug(\"로컬 스토리지에서 토큰 확인\");const access_token=localStorage.getItem('access_token');const refresh_token=localStorage.getItem('refresh_token');const timestamp=localStorage.getItem('social_login_timestamp');if(!access_token||!refresh_token){debug(\"로컬 스토리지에 토큰이 없음\");return false;}// 이미 인증되었으면 처리하지 않음\nif(isAuthenticated){debug(\"이미 인증된 상태, 로컬 스토리지 토큰 처리 건너뜀\");return false;}// 최근에 체크했는지 확인 (5초 이내)\nconst now=Date.now();const lastCheck=parseInt(timestamp||'0');// 타임스탬프가 없거나 너무 오래되었으면 처리하지 않음\nif(!timestamp||now-lastCheck>300000){// 5분 이상 지났으면 만료된 것으로 간주\ndebug(`토큰 타임스탬프가 오래됨 (${(now-lastCheck)/1000}초 전)`);return false;}debug(`로컬 스토리지에서 최근 토큰 발견: ${access_token.substring(0,10)}... (${(now-lastCheck)/1000}초 전)`);try{// API 클라이언트 인증 헤더 설정\napiClient.defaults.headers.common['Authorization']=`Bearer ${access_token}`;debug(\"인증 헤더 설정 완료\");// 사용자 프로필 정보 가져오기\ndebug(\"사용자 프로필 요청 시작...\");const userData=await getProfile();debug(\"사용자 프로필 수신 성공:\",userData);// 인증 컨텍스트 업데이트\nlogin(access_token,refresh_token,userData);debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");// 성공 메시지 표시\ntoast.success(`${userData.name||userData.email||'사용자'}님 환영합니다!`);// 소셜 로그인 성공 이벤트 발생\nwindow.dispatchEvent(new CustomEvent('socialLoginComplete',{detail:{success:true,provider:userData.email?userData.email.split('@')[1]:'unknown'}}));// 홈 페이지로 리다이렉트\nnavigate('/',{replace:true});// 타임스탬프 삭제\nlocalStorage.removeItem('social_login_timestamp');return true;}catch(error){console.error('로컬 스토리지 토큰 처리 중 오류:',error);if(error.response){debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data||{})}`);}// 토큰이 유효하지 않은 경우 제거\nif(error.response&&(error.response.status===401||error.response.status===403)){debug(\"토큰이 유효하지 않음, 제거\");localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('social_login_timestamp');}delete apiClient.defaults.headers.common['Authorization'];return false;}},[login,navigate,isAuthenticated]);// useCallback으로 함수 메모이제이션\nconst handleMessage=useCallback(async event=>{var _event$data,_event$data2;debug(\"메시지 이벤트 수신: \"+JSON.stringify(event.origin));// 1) HMR 메시지 무시\nif(((_event$data=event.data)===null||_event$data===void 0?void 0:_event$data.type)==='webpackOk'){debug(\"HMR 메시지 무시\");return;}// 세부 이벤트 데이터 로깅 (민감 정보 제외)\nconst eventDataType=((_event$data2=event.data)===null||_event$data2===void 0?void 0:_event$data2.type)||'no-type';debug(`이벤트 데이터 타입: ${eventDataType}`);// 2) 출처 확인\nif(event.origin!=='http://localhost:8000'){debug(`허용되지 않은 오리진: ${event.origin}`);return;}// 3) 메시지 타입 확인\nconst{type,access_token,refresh_token}=event.data||{};if(type!=='social-login-success'){debug(`지원되지 않는 메시지 타입: ${type}`);return;}debug(\"소셜 로그인 성공 메시지를 처리합니다\");// 토큰 유효성 검사\nif(!access_token||!refresh_token){debug(\"토큰 정보가 누락되었습니다\");toast.error(\"로그인 정보가 유효하지 않습니다\");return;}debug(`토큰 정보 확인됨: ${access_token.substring(0,10)}...`);try{// 1. 로컬 스토리지에 토큰 저장\nlocalStorage.setItem('access_token',access_token);localStorage.setItem('refresh_token',refresh_token);localStorage.setItem('social_login_timestamp',Date.now().toString());debug(\"토큰이 로컬 스토리지에 저장됨\");// 2. API 클라이언트 인증 헤더 설정\napiClient.defaults.headers.common['Authorization']=`Bearer ${access_token}`;debug(\"인증 헤더 설정 완료\");// 3. 사용자 프로필 정보 가져오기\ndebug(\"사용자 프로필 요청 시작...\");const userData=await getProfile();debug(\"사용자 프로필 수신 성공:\",userData);// 4. 인증 컨텍스트 업데이트\nlogin(access_token,refresh_token,userData);debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");// 5. 성공 메시지 표시\ntoast.success(`${userData.name||userData.email||'사용자'}님 환영합니다!`,{position:\"top-center\",autoClose:3000});// 6. 홈 페이지로 리다이렉트\ndebug(\"홈 페이지로 이동합니다\");navigate('/',{replace:true});// 7. 소셜 로그인 성공 이벤트 발생 (옵션)\nwindow.dispatchEvent(new CustomEvent('socialLoginComplete',{detail:{success:true,provider:userData.email?userData.email.split('@')[1]:'unknown'}}));}catch(error){console.error('소셜 로그인 처리 중 오류:',error);debug(`오류 세부 정보: ${error.message}`);if(error.response){debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data||{})}`);}toast.error('로그인 처리 중 오류가 발생했습니다');// 오류 발생 시 토큰 삭제\nlocalStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('social_login_timestamp');delete apiClient.defaults.headers.common['Authorization'];navigate('/login');}},[login,navigate]);// 로컬 스토리지 이벤트 핸들러\nconst handleStorageChange=useCallback(event=>{if(event.key==='social_login_timestamp'&&event.newValue){debug(\"다른 탭에서 소셜 로그인 토큰 변경 감지\");processLocalStorageTokens();}},[processLocalStorageTokens]);// 이벤트 리스너 등록 및 제거 (StrictMode 중복 방지)\nconst listenerRegistered=useRef(false);useEffect(()=>{debug(\"컴포넌트 마운트\");// 로컬 스토리지에서 토큰 확인\nprocessLocalStorageTokens().then(success=>{debug(`로컬 스토리지 토큰 처리 ${success?'성공':'실패 또는 토큰 없음'}`);});if(!listenerRegistered.current){debug(\"메시지 이벤트 리스너 등록\");window.addEventListener('message',handleMessage);window.addEventListener('storage',handleStorageChange);listenerRegistered.current=true;}// 정기적으로 로컬 스토리지 확인 (1초 간격)\ncheckInterval.current=setInterval(()=>{const now=Date.now();// 마지막 체크로부터 1초가 지났을 때만 체크\nif(now-lastChecked>1000){setLastChecked(now);processLocalStorageTokens().then(success=>{if(success){// 성공했으면 인터벌 클리어\nif(checkInterval.current){clearInterval(checkInterval.current);checkInterval.current=null;}}});}},1000);return()=>{if(listenerRegistered.current){debug(\"메시지 이벤트 리스너 제거\");window.removeEventListener('message',handleMessage);window.removeEventListener('storage',handleStorageChange);listenerRegistered.current=false;}if(checkInterval.current){clearInterval(checkInterval.current);checkInterval.current=null;}};},[handleMessage,processLocalStorageTokens,handleStorageChange,lastChecked]);return null;// UI 렌더링 없음\n};export default SocialLoginHandler;","map":{"version":3,"names":["useEffect","useCallback","useRef","useState","useNavigate","useAuth","apiClient","getProfile","toast","SocialLoginHandler","login","isAuthenticated","navigate","lastChecked","setLastChecked","checkInterval","debug","message","console","log","processLocalStorageTokens","access_token","localStorage","getItem","refresh_token","timestamp","now","Date","lastCheck","parseInt","substring","defaults","headers","common","userData","success","name","email","window","dispatchEvent","CustomEvent","detail","provider","split","replace","removeItem","error","response","status","JSON","stringify","data","handleMessage","event","_event$data","_event$data2","origin","type","eventDataType","setItem","toString","position","autoClose","handleStorageChange","key","newValue","listenerRegistered","then","current","addEventListener","setInterval","clearInterval","removeEventListener"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/SocialLoginHandler.js"],"sourcesContent":["import { useEffect, useCallback, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './context/AuthContext';\nimport apiClient from './api/client'; // Axios 인스턴스 import\nimport { getProfile } from './api/auth';\nimport { toast } from 'react-toastify';\n\n/**\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\n */\nconst SocialLoginHandler = () => {\n  const { login, isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n  const [lastChecked, setLastChecked] = useState(0);\n  const checkInterval = useRef(null);\n\n  // 디버깅 함수\n  const debug = (message) => {\n    console.log(\"[SocialLoginHandler]\", message);\n  };\n\n  // 로컬 스토리지에서 토큰 처리\n  const processLocalStorageTokens = useCallback(async () => {\n    debug(\"로컬 스토리지에서 토큰 확인\");\n    const access_token = localStorage.getItem('access_token');\n    const refresh_token = localStorage.getItem('refresh_token');\n    const timestamp = localStorage.getItem('social_login_timestamp');\n\n    if (!access_token || !refresh_token) {\n      debug(\"로컬 스토리지에 토큰이 없음\");\n      return false;\n    }\n\n    // 이미 인증되었으면 처리하지 않음\n    if (isAuthenticated) {\n      debug(\"이미 인증된 상태, 로컬 스토리지 토큰 처리 건너뜀\");\n      return false;\n    }\n\n    // 최근에 체크했는지 확인 (5초 이내)\n    const now = Date.now();\n    const lastCheck = parseInt(timestamp || '0');\n    \n    // 타임스탬프가 없거나 너무 오래되었으면 처리하지 않음\n    if (!timestamp || now - lastCheck > 300000) { // 5분 이상 지났으면 만료된 것으로 간주\n      debug(`토큰 타임스탬프가 오래됨 (${(now - lastCheck) / 1000}초 전)`);\n      return false;\n    }\n\n    debug(`로컬 스토리지에서 최근 토큰 발견: ${access_token.substring(0, 10)}... (${(now - lastCheck) / 1000}초 전)`);\n    \n    try {\n      // API 클라이언트 인증 헤더 설정\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      debug(\"인증 헤더 설정 완료\");\n      \n      // 사용자 프로필 정보 가져오기\n      debug(\"사용자 프로필 요청 시작...\");\n      const userData = await getProfile();\n      debug(\"사용자 프로필 수신 성공:\", userData);\n      \n      // 인증 컨텍스트 업데이트\n      login(access_token, refresh_token, userData);\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n      \n      // 성공 메시지 표시\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`);\n      \n      // 소셜 로그인 성공 이벤트 발생\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', { \n        detail: { success: true, provider: userData.email ? userData.email.split('@')[1] : 'unknown' } \n      }));\n      \n      // 홈 페이지로 리다이렉트\n      navigate('/', { replace: true });\n      \n      // 타임스탬프 삭제\n      localStorage.removeItem('social_login_timestamp');\n      \n      return true;\n    } catch (error) {\n      console.error('로컬 스토리지 토큰 처리 중 오류:', error);\n      \n      if (error.response) {\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data || {})}`);\n      }\n      \n      // 토큰이 유효하지 않은 경우 제거\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        debug(\"토큰이 유효하지 않음, 제거\");\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('social_login_timestamp');\n      }\n      \n      delete apiClient.defaults.headers.common['Authorization'];\n      \n      return false;\n    }\n  }, [login, navigate, isAuthenticated]);\n\n  // useCallback으로 함수 메모이제이션\n  const handleMessage = useCallback(async (event) => {\n    debug(\"메시지 이벤트 수신: \" + JSON.stringify(event.origin));\n    \n    // 1) HMR 메시지 무시\n    if (event.data?.type === 'webpackOk') {\n      debug(\"HMR 메시지 무시\");\n      return;\n    }\n    \n    // 세부 이벤트 데이터 로깅 (민감 정보 제외)\n    const eventDataType = event.data?.type || 'no-type';\n    debug(`이벤트 데이터 타입: ${eventDataType}`);\n    \n    // 2) 출처 확인\n    if (event.origin !== 'http://localhost:8000') {\n      debug(`허용되지 않은 오리진: ${event.origin}`);\n      return;\n    }\n    // 3) 메시지 타입 확인\n    const { type, access_token, refresh_token } = event.data || {};\n    if (type !== 'social-login-success') {\n      debug(`지원되지 않는 메시지 타입: ${type}`);\n      return;\n    }\n    debug(\"소셜 로그인 성공 메시지를 처리합니다\");\n    \n    // 토큰 유효성 검사\n    if (!access_token || !refresh_token) {\n      debug(\"토큰 정보가 누락되었습니다\");\n      toast.error(\"로그인 정보가 유효하지 않습니다\");\n      return;\n    }\n\n    debug(`토큰 정보 확인됨: ${access_token.substring(0, 10)}...`);\n    \n    try {\n      // 1. 로컬 스토리지에 토큰 저장\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n      localStorage.setItem('social_login_timestamp', Date.now().toString());\n      debug(\"토큰이 로컬 스토리지에 저장됨\");\n      \n      // 2. API 클라이언트 인증 헤더 설정\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      debug(\"인증 헤더 설정 완료\");\n      \n      // 3. 사용자 프로필 정보 가져오기\n      debug(\"사용자 프로필 요청 시작...\");\n      const userData = await getProfile();\n      debug(\"사용자 프로필 수신 성공:\", userData);\n      \n      // 4. 인증 컨텍스트 업데이트\n      login(access_token, refresh_token, userData);\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n      \n      // 5. 성공 메시지 표시\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`, {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n      \n      // 6. 홈 페이지로 리다이렉트\n      debug(\"홈 페이지로 이동합니다\");\n      navigate('/', { replace: true });\n      \n      // 7. 소셜 로그인 성공 이벤트 발생 (옵션)\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', { \n        detail: { success: true, provider: userData.email ? userData.email.split('@')[1] : 'unknown' } \n      }));\n      \n    } catch (error) {\n      console.error('소셜 로그인 처리 중 오류:', error);\n      debug(`오류 세부 정보: ${error.message}`);\n      \n      if (error.response) {\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data || {})}`);\n      }\n      \n      toast.error('로그인 처리 중 오류가 발생했습니다');\n      \n      // 오류 발생 시 토큰 삭제\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('social_login_timestamp');\n      delete apiClient.defaults.headers.common['Authorization'];\n      \n      navigate('/login');\n    }\n  }, [login, navigate]);\n\n  // 로컬 스토리지 이벤트 핸들러\n  const handleStorageChange = useCallback((event) => {\n    if (event.key === 'social_login_timestamp' && event.newValue) {\n      debug(\"다른 탭에서 소셜 로그인 토큰 변경 감지\");\n      processLocalStorageTokens();\n    }\n  }, [processLocalStorageTokens]);\n\n  // 이벤트 리스너 등록 및 제거 (StrictMode 중복 방지)\n  const listenerRegistered = useRef(false);\n  useEffect(() => {\n    debug(\"컴포넌트 마운트\");\n    \n    // 로컬 스토리지에서 토큰 확인\n    processLocalStorageTokens()\n      .then(success => {\n        debug(`로컬 스토리지 토큰 처리 ${success ? '성공' : '실패 또는 토큰 없음'}`);\n      });\n    \n    if (!listenerRegistered.current) {\n      debug(\"메시지 이벤트 리스너 등록\");\n      window.addEventListener('message', handleMessage);\n      window.addEventListener('storage', handleStorageChange);\n      listenerRegistered.current = true;\n    }\n    \n    // 정기적으로 로컬 스토리지 확인 (1초 간격)\n    checkInterval.current = setInterval(() => {\n      const now = Date.now();\n      // 마지막 체크로부터 1초가 지났을 때만 체크\n      if (now - lastChecked > 1000) {\n        setLastChecked(now);\n        processLocalStorageTokens()\n          .then(success => {\n            if (success) {\n              // 성공했으면 인터벌 클리어\n              if (checkInterval.current) {\n                clearInterval(checkInterval.current);\n                checkInterval.current = null;\n              }\n            }\n          });\n      }\n    }, 1000);\n    \n    return () => {\n      if (listenerRegistered.current) {\n        debug(\"메시지 이벤트 리스너 제거\");\n        window.removeEventListener('message', handleMessage);\n        window.removeEventListener('storage', handleStorageChange);\n        listenerRegistered.current = false;\n      }\n      \n      if (checkInterval.current) {\n        clearInterval(checkInterval.current);\n        checkInterval.current = null;\n      }\n    };\n  }, [handleMessage, processLocalStorageTokens, handleStorageChange, lastChecked]);\n\n  return null; // UI 렌더링 없음\n};\n\nexport default SocialLoginHandler;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}