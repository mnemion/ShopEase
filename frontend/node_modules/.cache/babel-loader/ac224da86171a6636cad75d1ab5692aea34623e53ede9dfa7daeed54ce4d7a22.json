{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\COM-LM\\\\Documents\\\\ShopEase\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { getProfile } from '../api/auth';\nimport apiClient from '../api/client';\n\n// 인증 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 로컬 스토리지에서 토큰 가져오기\n  const getTokens = () => {\n    const access = localStorage.getItem('access_token');\n    const refresh = localStorage.getItem('refresh_token');\n    return {\n      access,\n      refresh\n    };\n  };\n\n  // 토큰 저장하기\n  const setTokens = (access, refresh) => {\n    localStorage.setItem('access_token', access);\n    localStorage.setItem('refresh_token', refresh);\n  };\n\n  // 토큰 제거하기\n  const removeTokens = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  };\n\n  // 액세스 토큰 갱신 함수\n  const refreshAccessToken = async () => {\n    try {\n      const refresh = localStorage.getItem('refresh_token');\n      if (!refresh) throw new Error('No refresh token available');\n      const response = await apiClient.post('/users/token/refresh/', {\n        refresh\n      });\n      const {\n        access\n      } = response.data;\n\n      // 새 액세스 토큰 저장\n      localStorage.setItem('access_token', access);\n      return access;\n    } catch (error) {\n      console.error('Failed to refresh token:', error);\n      // 토큰 갱신 실패시 로그아웃 처리\n      logout();\n      throw error;\n    }\n  };\n\n  // 로그인 처리\n  const login = (access, refresh, userData) => {\n    setTokens(access, refresh);\n    setUser(userData);\n    setIsAuthenticated(true);\n    setError(null);\n  };\n\n  // 로그아웃 처리\n  const logout = () => {\n    removeTokens();\n    setUser(null);\n    setIsAuthenticated(false);\n    // 세션/로컬스토리지 추가 정리\n    sessionStorage.clear();\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    // 모든 쿠키 삭제 (간단 버전)\n    document.cookie.split(';').forEach(function (c) {\n      document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\n    });\n  };\n\n  // 사용자 정보 갱신\n  const updateUserInfo = userData => {\n    setUser(userData);\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  // 로그인 상태 확인 (앱 초기화 시 호출)\n  useEffect(() => {\n    const checkAuth = async () => {\n      setIsLoading(true);\n      const {\n        access,\n        refresh\n      } = getTokens();\n      if (!access || !refresh) {\n        setIsLoading(false);\n        return;\n      }\n      try {\n        // 먼저 현재 액세스 토큰으로 사용자 정보 요청 시도\n        try {\n          const userData = await getProfile();\n          setUser(userData);\n          setIsAuthenticated(true);\n        } catch (profileError) {\n          // 액세스 토큰이 만료된 경우 갱신 시도\n          if (profileError.response && (profileError.response.status === 401 || profileError.response.status === 403)) {\n            await refreshAccessToken();\n\n            // 갱신된 토큰으로 다시 사용자 정보 요청\n            const userData = await getProfile();\n            setUser(userData);\n            setIsAuthenticated(true);\n          } else {\n            throw profileError;\n          }\n        }\n      } catch (err) {\n        console.error('인증 확인 실패:', err);\n        logout(); // 모든 오류 시 로그아웃\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // 컨텍스트에 제공할 값\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    logout,\n    updateUserInfo,\n    setError,\n    refreshAccessToken // 필요할 때 토큰 갱신을 위해 노출\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 10\n  }, this);\n};\n\n// 인증 컨텍스트 사용을 위한 훅\n_s(AuthProvider, \"FjMZAxZvphMxP/TGOt3ewSdLoU4=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","getProfile","apiClient","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","getTokens","access","localStorage","getItem","refresh","setTokens","setItem","removeTokens","removeItem","refreshAccessToken","Error","response","post","data","console","logout","login","userData","sessionStorage","clear","document","cookie","split","forEach","c","replace","Date","toUTCString","updateUserInfo","checkAuth","profileError","status","err","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { getProfile } from '../api/auth';\r\nimport apiClient from '../api/client';\r\n\r\n// 인증 컨텍스트 생성\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 로컬 스토리지에서 토큰 가져오기\r\n  const getTokens = () => {\r\n    const access = localStorage.getItem('access_token');\r\n    const refresh = localStorage.getItem('refresh_token');\r\n    return { access, refresh };\r\n  };\r\n\r\n  // 토큰 저장하기\r\n  const setTokens = (access, refresh) => {\r\n    localStorage.setItem('access_token', access);\r\n    localStorage.setItem('refresh_token', refresh);\r\n  };\r\n\r\n  // 토큰 제거하기\r\n  const removeTokens = () => {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n  };\r\n\r\n  // 액세스 토큰 갱신 함수\r\n  const refreshAccessToken = async () => {\r\n    try {\r\n      const refresh = localStorage.getItem('refresh_token');\r\n      if (!refresh) throw new Error('No refresh token available');\r\n      \r\n      const response = await apiClient.post('/users/token/refresh/', { refresh });\r\n      const { access } = response.data;\r\n      \r\n      // 새 액세스 토큰 저장\r\n      localStorage.setItem('access_token', access);\r\n      return access;\r\n    } catch (error) {\r\n      console.error('Failed to refresh token:', error);\r\n      // 토큰 갱신 실패시 로그아웃 처리\r\n      logout();\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 로그인 처리\r\n  const login = (access, refresh, userData) => {\r\n    setTokens(access, refresh);\r\n    setUser(userData);\r\n    setIsAuthenticated(true);\r\n    setError(null);\r\n  };\r\n\r\n  // 로그아웃 처리\r\n  const logout = () => {\r\n    removeTokens();\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    // 세션/로컬스토리지 추가 정리\r\n    sessionStorage.clear();\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    // 모든 쿠키 삭제 (간단 버전)\r\n    document.cookie.split(';').forEach(function(c) {\r\n      document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\r\n    });\r\n  };\r\n\r\n  // 사용자 정보 갱신\r\n  const updateUserInfo = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  // 로그인 상태 확인 (앱 초기화 시 호출)\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      setIsLoading(true);\r\n      const { access, refresh } = getTokens();\r\n      \r\n      if (!access || !refresh) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        // 먼저 현재 액세스 토큰으로 사용자 정보 요청 시도\r\n        try {\r\n          const userData = await getProfile();\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n        } catch (profileError) {\r\n          // 액세스 토큰이 만료된 경우 갱신 시도\r\n          if (profileError.response && (profileError.response.status === 401 || profileError.response.status === 403)) {\r\n            await refreshAccessToken();\r\n            \r\n            // 갱신된 토큰으로 다시 사용자 정보 요청\r\n            const userData = await getProfile();\r\n            setUser(userData);\r\n            setIsAuthenticated(true);\r\n          } else {\r\n            throw profileError;\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('인증 확인 실패:', err);\r\n        logout(); // 모든 오류 시 로그아웃\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    checkAuth();\r\n  }, []);\r\n\r\n  // 컨텍스트에 제공할 값\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    error,\r\n    login,\r\n    logout,\r\n    updateUserInfo,\r\n    setError,\r\n    refreshAccessToken, // 필요할 때 토큰 갱신을 위해 노출\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// 인증 컨텍스트 사용을 위한 훅\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}