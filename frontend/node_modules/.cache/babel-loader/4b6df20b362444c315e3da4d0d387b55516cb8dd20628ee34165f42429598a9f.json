{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './context/AuthContext';\nimport apiClient from './api/client'; // Axios 인스턴스 import\nimport { getProfile } from './api/auth';\nimport { toast } from 'react-toastify';\n\n/**\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\n */\nconst SocialLoginHandler = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  const navigate = useNavigate();\n\n  // 디버깅 함수\n  const debug = message => {\n    console.log(\"[SocialLoginHandler]\", message);\n  };\n\n  // useCallback으로 함수 메모이제이션\n  const handleMessage = useCallback(async event => {\n    var _event$data;\n    // 1) HMR 메시지 무시\n    if (((_event$data = event.data) === null || _event$data === void 0 ? void 0 : _event$data.type) === 'webpackOk') {\n      debug(\"HMR 메시지 무시\");\n      return;\n    }\n    // 2) 출처 확인\n    if (event.origin !== 'http://localhost:8000') {\n      debug(`허용되지 않은 오리진: ${event.origin}`);\n      return;\n    }\n    // 3) 메시지 타입 및 페이로드 상세 디버깅\n    const {\n      type,\n      payload\n    } = event.data || {};\n\n    // === 디버깅 로그 추가 시작 ===\n    debug(\"Received message event:\");\n    debug(`  Origin: ${event.origin}`);\n    debug(`  Data type: ${type}`);\n    if (payload) {\n      debug(`  Payload keys: ${Object.keys(payload).join(', ')}`);\n      debug(`  Access Token Snippet: ${payload.access_token ? payload.access_token.substring(0, 10) + '...' : 'Not Found'}`);\n      debug(`  Refresh Token Snippet: ${payload.refresh_token ? payload.refresh_token.substring(0, 10) + '...' : 'Not Found'}`);\n      debug(`  User Email: ${payload.user_email || 'Not Provided'}`);\n    } else {\n      debug(\"  Payload is empty or missing\");\n    }\n    // === 디버깅 로그 추가 끝 ===\n\n    if (type !== 'social-login-success') {\n      debug(\"Ignoring message: type is not 'social-login-success'\");\n      return;\n    }\n    debug(\"소셜 로그인 성공 메시지를 처리합니다\");\n    const {\n      access_token,\n      refresh_token,\n      user_email\n    } = payload || {};\n    debug(`사용자 이메일: ${user_email || '알 수 없음'}`);\n\n    // 토큰 유효성 검사\n    if (!access_token || !refresh_token) {\n      debug(\"토큰 정보가 누락되었습니다\");\n      toast.error(\"로그인 정보가 유효하지 않습니다\");\n      return;\n    }\n    debug(`토큰 정보 확인됨: ${access_token.substring(0, 10)}...`);\n    try {\n      // 1. 로컬 스토리지에 토큰 저장\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n      debug(\"토큰이 로컬 스토리지에 저장됨\");\n\n      // 2. API 클라이언트 인증 헤더 설정\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      debug(\"인증 헤더 설정 완료\");\n\n      // 3. 사용자 프로필 정보 가져오기\n      debug(\"사용자 프로필 요청 시작...\");\n      const userData = await getProfile();\n      debug(\"사용자 프로필 수신 성공:\", userData);\n\n      // 4. 인증 컨텍스트 업데이트\n      login(access_token, refresh_token, userData);\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n\n      // 5. 성공 메시지 표시\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`, {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n\n      // 6. 홈 페이지로 리다이렉트\n      debug(\"홈 페이지로 이동합니다\");\n      navigate('/', {\n        replace: true\n      });\n\n      // 7. 소셜 로그인 성공 이벤트 발생 (옵션)\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', {\n        detail: {\n          success: true,\n          provider: user_email ? user_email.split('@')[1] : 'unknown'\n        }\n      }));\n    } catch (error) {\n      console.error('소셜 로그인 처리 중 오류:', error);\n      debug(`오류 세부 정보: ${error.message}`);\n      if (error.response) {\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data)}`);\n      }\n      toast.error('로그인 처리 중 오류가 발생했습니다');\n\n      // 오류 발생 시 토큰 삭제\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      delete apiClient.defaults.headers.common['Authorization'];\n      navigate('/login');\n    }\n  }, [login, navigate]);\n\n  // 이벤트 리스너 등록 및 제거 (StrictMode 중복 방지)\n  const listenerRegistered = useRef(false);\n  useEffect(() => {\n    if (!listenerRegistered.current) {\n      debug(\"메시지 이벤트 리스너 등록\");\n      window.addEventListener('message', handleMessage);\n      listenerRegistered.current = true;\n    }\n    return () => {\n      if (listenerRegistered.current) {\n        debug(\"메시지 이벤트 리스너 제거\");\n        window.removeEventListener('message', handleMessage);\n        listenerRegistered.current = false;\n      }\n    };\n  }, [handleMessage]);\n  return null; // UI 렌더링 없음\n};\n_s(SocialLoginHandler, \"QnflKUeyfOu9AjSfiHXCjHyFTE4=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = SocialLoginHandler;\nexport default SocialLoginHandler;\nvar _c;\n$RefreshReg$(_c, \"SocialLoginHandler\");","map":{"version":3,"names":["useEffect","useCallback","useRef","useNavigate","useAuth","apiClient","getProfile","toast","SocialLoginHandler","_s","login","navigate","debug","message","console","log","handleMessage","event","_event$data","data","type","origin","payload","Object","keys","join","access_token","substring","refresh_token","user_email","error","localStorage","setItem","defaults","headers","common","userData","success","name","email","position","autoClose","replace","window","dispatchEvent","CustomEvent","detail","provider","split","response","status","JSON","stringify","removeItem","listenerRegistered","current","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/SocialLoginHandler.js"],"sourcesContent":["import { useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './context/AuthContext';\nimport apiClient from './api/client'; // Axios 인스턴스 import\nimport { getProfile } from './api/auth';\nimport { toast } from 'react-toastify';\n\n/**\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\n */\nconst SocialLoginHandler = () => {\n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  // 디버깅 함수\n  const debug = (message) => {\n    console.log(\"[SocialLoginHandler]\", message);\n  };\n\n  // useCallback으로 함수 메모이제이션\n  const handleMessage = useCallback(async (event) => {\n    // 1) HMR 메시지 무시\n    if (event.data?.type === 'webpackOk') {\n      debug(\"HMR 메시지 무시\");\n      return;\n    }\n    // 2) 출처 확인\n    if (event.origin !== 'http://localhost:8000') {\n      debug(`허용되지 않은 오리진: ${event.origin}`);\n      return;\n    }\n    // 3) 메시지 타입 및 페이로드 상세 디버깅\n    const { type, payload } = event.data || {};\n\n    // === 디버깅 로그 추가 시작 ===\n    debug(\"Received message event:\");\n    debug(`  Origin: ${event.origin}`);\n    debug(`  Data type: ${type}`);\n    if (payload) {\n      debug(`  Payload keys: ${Object.keys(payload).join(', ')}`);\n      debug(`  Access Token Snippet: ${payload.access_token ? payload.access_token.substring(0, 10) + '...' : 'Not Found'}`);\n      debug(`  Refresh Token Snippet: ${payload.refresh_token ? payload.refresh_token.substring(0, 10) + '...' : 'Not Found'}`);\n      debug(`  User Email: ${payload.user_email || 'Not Provided'}`);\n    } else {\n      debug(\"  Payload is empty or missing\");\n    }\n    // === 디버깅 로그 추가 끝 ===\n\n    if (type !== 'social-login-success') {\n      debug(\"Ignoring message: type is not 'social-login-success'\");\n      return;\n    }\n    debug(\"소셜 로그인 성공 메시지를 처리합니다\");\n    const { access_token, refresh_token, user_email } = payload || {};\n    debug(`사용자 이메일: ${user_email || '알 수 없음'}`);\n    \n    // 토큰 유효성 검사\n    if (!access_token || !refresh_token) {\n      debug(\"토큰 정보가 누락되었습니다\");\n      toast.error(\"로그인 정보가 유효하지 않습니다\");\n      return;\n    }\n\n    debug(`토큰 정보 확인됨: ${access_token.substring(0, 10)}...`);\n    \n    try {\n      // 1. 로컬 스토리지에 토큰 저장\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n      debug(\"토큰이 로컬 스토리지에 저장됨\");\n      \n      // 2. API 클라이언트 인증 헤더 설정\n      apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      debug(\"인증 헤더 설정 완료\");\n      \n      // 3. 사용자 프로필 정보 가져오기\n      debug(\"사용자 프로필 요청 시작...\");\n      const userData = await getProfile();\n      debug(\"사용자 프로필 수신 성공:\", userData);\n      \n      // 4. 인증 컨텍스트 업데이트\n      login(access_token, refresh_token, userData);\n      debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n      \n      // 5. 성공 메시지 표시\n      toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`, {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n      \n      // 6. 홈 페이지로 리다이렉트\n      debug(\"홈 페이지로 이동합니다\");\n      navigate('/', { replace: true });\n      \n      // 7. 소셜 로그인 성공 이벤트 발생 (옵션)\n      window.dispatchEvent(new CustomEvent('socialLoginComplete', { \n        detail: { success: true, provider: user_email ? user_email.split('@')[1] : 'unknown' } \n      }));\n      \n    } catch (error) {\n      console.error('소셜 로그인 처리 중 오류:', error);\n      debug(`오류 세부 정보: ${error.message}`);\n      \n      if (error.response) {\n        debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data)}`);\n      }\n      \n      toast.error('로그인 처리 중 오류가 발생했습니다');\n      \n      // 오류 발생 시 토큰 삭제\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      delete apiClient.defaults.headers.common['Authorization'];\n      \n      navigate('/login');\n    }\n  }, [login, navigate]);\n\n  // 이벤트 리스너 등록 및 제거 (StrictMode 중복 방지)\n  const listenerRegistered = useRef(false);\n  useEffect(() => {\n    if (!listenerRegistered.current) {\n      debug(\"메시지 이벤트 리스너 등록\");\n      window.addEventListener('message', handleMessage);\n      listenerRegistered.current = true;\n    }\n    return () => {\n      if (listenerRegistered.current) {\n        debug(\"메시지 이벤트 리스너 제거\");\n        window.removeEventListener('message', handleMessage);\n        listenerRegistered.current = false;\n      }\n    };\n  }, [handleMessage]);\n\n  return null; // UI 렌더링 없음\n};\n\nexport default SocialLoginHandler;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}