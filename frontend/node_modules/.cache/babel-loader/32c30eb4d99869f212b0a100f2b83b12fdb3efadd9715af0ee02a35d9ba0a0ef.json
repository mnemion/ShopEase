{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './context/AuthContext';\nimport apiClient from './api/client'; // Axios 인스턴스 import\nimport { getProfile } from './api/auth';\nimport { toast } from 'react-toastify';\n\n/**\r\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\r\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\r\n */\nconst SocialLoginHandler = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  const navigate = useNavigate();\n\n  // 디버깅 함수\n  const debug = message => {\n    console.log(\"[SocialLoginHandler]\", message);\n  };\n\n  // useCallback으로 함수 메모이제이션\n  const handleMessage = useCallback(async event => {\n    var _event$data;\n    debug(`메시지 수신: Origin=${event.origin}, Type=${((_event$data = event.data) === null || _event$data === void 0 ? void 0 : _event$data.type) || 'undefined'}`);\n\n    // 개발 환경에서는 모든 Origin 허용 (디버깅용)\n    // Origin 검증을 개발 중에는 완화\n    const allowedOrigins = ['http://localhost:8000',\n    // Django 백엔드\n    'http://localhost:3000',\n    // React 프론트엔드\n    window.location.origin // 현재 창의 오리진\n    ];\n    if (!allowedOrigins.includes(event.origin)) {\n      console.warn(`알 수 없는 오리진: ${event.origin}`);\n      debug(\"하지만 개발 환경에서는 계속 진행합니다.\");\n      // 개발 중에는 계속 진행\n    }\n\n    // 데이터 형식 및 내용 검증\n    if (!event.data) {\n      debug(\"메시지에 데이터가 없습니다.\");\n      return;\n    }\n\n    // 소셜 로그인 성공 메시지인지 확인\n    if (event.data.type === 'social-login-success') {\n      debug(\"소셜 로그인 성공 메시지를 처리합니다\");\n\n      // 페이로드에서 토큰 추출\n      const {\n        access_token,\n        refresh_token,\n        user_email\n      } = event.data.payload || {};\n      debug(`사용자 이메일: ${user_email || '알 수 없음'}`);\n\n      // 토큰 유효성 검사\n      if (!access_token || !refresh_token) {\n        debug(\"토큰 정보가 누락되었습니다\");\n        toast.error(\"로그인 정보가 유효하지 않습니다\");\n        return;\n      }\n      debug(`토큰 정보 확인됨: ${access_token.substring(0, 10)}...`);\n      try {\n        // 1. 로컬 스토리지에 토큰 저장\n        localStorage.setItem('access_token', access_token);\n        localStorage.setItem('refresh_token', refresh_token);\n        debug(\"토큰이 로컬 스토리지에 저장됨\");\n\n        // 2. API 클라이언트 인증 헤더 설정\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n        debug(\"인증 헤더 설정 완료\");\n\n        // 3. 사용자 프로필 정보 가져오기\n        debug(\"사용자 프로필 요청 시작...\");\n        const userData = await getProfile();\n        debug(\"사용자 프로필 수신 성공:\", userData);\n\n        // 4. 인증 컨텍스트 업데이트\n        login(access_token, refresh_token, userData);\n        debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\n\n        // 5. 성공 메시지 표시\n        toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`, {\n          position: \"top-center\",\n          autoClose: 3000\n        });\n\n        // 6. 홈 페이지로 리다이렉트\n        debug(\"홈 페이지로 이동합니다\");\n        navigate('/', {\n          replace: true\n        });\n\n        // 7. 소셜 로그인 성공 이벤트 발생 (옵션)\n        window.dispatchEvent(new CustomEvent('socialLoginComplete', {\n          detail: {\n            success: true,\n            provider: user_email ? user_email.split('@')[1] : 'unknown'\n          }\n        }));\n      } catch (error) {\n        console.error('소셜 로그인 처리 중 오류:', error);\n        debug(`오류 세부 정보: ${error.message}`);\n        if (error.response) {\n          debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data)}`);\n        }\n        toast.error('로그인 처리 중 오류가 발생했습니다');\n\n        // 오류 발생 시 토큰 삭제\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        delete apiClient.defaults.headers.common['Authorization'];\n        navigate('/login');\n      }\n    } else if (event.data.type === 'social-login-closing') {\n      // 소셜 로그인 팝업이 닫히는 중 (옵션)\n      debug(\"소셜 로그인 팝업이 닫히는 중입니다\");\n    }\n  }, [login, navigate]);\n\n  // 이벤트 리스너 등록 및 제거\n  useEffect(() => {\n    debug(\"메시지 이벤트 리스너 등록\");\n    window.addEventListener('message', handleMessage);\n    return () => {\n      debug(\"메시지 이벤트 리스너 제거\");\n      window.removeEventListener('message', handleMessage);\n    };\n  }, [handleMessage]);\n  return null; // UI 렌더링 없음\n};\n_s(SocialLoginHandler, \"U4ZX0FWaxwkDG/mIs+7u/9jjiEE=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = SocialLoginHandler;\nexport default SocialLoginHandler;\nvar _c;\n$RefreshReg$(_c, \"SocialLoginHandler\");","map":{"version":3,"names":["useEffect","useCallback","useNavigate","useAuth","apiClient","getProfile","toast","SocialLoginHandler","_s","login","navigate","debug","message","console","log","handleMessage","event","_event$data","origin","data","type","allowedOrigins","window","location","includes","warn","access_token","refresh_token","user_email","payload","error","substring","localStorage","setItem","defaults","headers","common","userData","success","name","email","position","autoClose","replace","dispatchEvent","CustomEvent","detail","provider","split","response","status","JSON","stringify","removeItem","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["C:/Users/COM-LM/Documents/ShopEase/frontend/src/SocialLoginHandler.js"],"sourcesContent":["import { useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from './context/AuthContext';\r\nimport apiClient from './api/client'; // Axios 인스턴스 import\r\nimport { getProfile } from './api/auth';\r\nimport { toast } from 'react-toastify';\r\n\r\n/**\r\n * 소셜 로그인 결과를 처리하는 핸들러 컴포넌트\r\n * 백엔드 팝업으로부터 메시지를 받아 로그인 처리를 완료하는 역할\r\n */\r\nconst SocialLoginHandler = () => {\r\n  const { login } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  // 디버깅 함수\r\n  const debug = (message) => {\r\n    console.log(\"[SocialLoginHandler]\", message);\r\n  };\r\n\r\n  // useCallback으로 함수 메모이제이션\r\n  const handleMessage = useCallback(async (event) => {\r\n    debug(`메시지 수신: Origin=${event.origin}, Type=${event.data?.type || 'undefined'}`);\r\n    \r\n    // 개발 환경에서는 모든 Origin 허용 (디버깅용)\r\n    // Origin 검증을 개발 중에는 완화\r\n    const allowedOrigins = [\r\n      'http://localhost:8000',  // Django 백엔드\r\n      'http://localhost:3000',  // React 프론트엔드\r\n      window.location.origin    // 현재 창의 오리진\r\n    ];\r\n    \r\n    if (!allowedOrigins.includes(event.origin)) {\r\n      console.warn(`알 수 없는 오리진: ${event.origin}`);\r\n      debug(\"하지만 개발 환경에서는 계속 진행합니다.\");\r\n      // 개발 중에는 계속 진행\r\n    }\r\n\r\n    // 데이터 형식 및 내용 검증\r\n    if (!event.data) {\r\n      debug(\"메시지에 데이터가 없습니다.\");\r\n      return;\r\n    }\r\n\r\n    // 소셜 로그인 성공 메시지인지 확인\r\n    if (event.data.type === 'social-login-success') {\r\n      debug(\"소셜 로그인 성공 메시지를 처리합니다\");\r\n      \r\n      // 페이로드에서 토큰 추출\r\n      const { access_token, refresh_token, user_email } = event.data.payload || {};\r\n      debug(`사용자 이메일: ${user_email || '알 수 없음'}`);\r\n      \r\n      // 토큰 유효성 검사\r\n      if (!access_token || !refresh_token) {\r\n        debug(\"토큰 정보가 누락되었습니다\");\r\n        toast.error(\"로그인 정보가 유효하지 않습니다\");\r\n        return;\r\n      }\r\n\r\n      debug(`토큰 정보 확인됨: ${access_token.substring(0, 10)}...`);\r\n      \r\n      try {\r\n        // 1. 로컬 스토리지에 토큰 저장\r\n        localStorage.setItem('access_token', access_token);\r\n        localStorage.setItem('refresh_token', refresh_token);\r\n        debug(\"토큰이 로컬 스토리지에 저장됨\");\r\n        \r\n        // 2. API 클라이언트 인증 헤더 설정\r\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n        debug(\"인증 헤더 설정 완료\");\r\n        \r\n        // 3. 사용자 프로필 정보 가져오기\r\n        debug(\"사용자 프로필 요청 시작...\");\r\n        const userData = await getProfile();\r\n        debug(\"사용자 프로필 수신 성공:\", userData);\r\n        \r\n        // 4. 인증 컨텍스트 업데이트\r\n        login(access_token, refresh_token, userData);\r\n        debug(\"로그인 완료! 인증 컨텍스트 업데이트됨\");\r\n        \r\n        // 5. 성공 메시지 표시\r\n        toast.success(`${userData.name || userData.email || '사용자'}님 환영합니다!`, {\r\n          position: \"top-center\",\r\n          autoClose: 3000\r\n        });\r\n        \r\n        // 6. 홈 페이지로 리다이렉트\r\n        debug(\"홈 페이지로 이동합니다\");\r\n        navigate('/', { replace: true });\r\n        \r\n        // 7. 소셜 로그인 성공 이벤트 발생 (옵션)\r\n        window.dispatchEvent(new CustomEvent('socialLoginComplete', { \r\n          detail: { success: true, provider: user_email ? user_email.split('@')[1] : 'unknown' } \r\n        }));\r\n        \r\n      } catch (error) {\r\n        console.error('소셜 로그인 처리 중 오류:', error);\r\n        debug(`오류 세부 정보: ${error.message}`);\r\n        \r\n        if (error.response) {\r\n          debug(`서버 응답: ${error.response.status} - ${JSON.stringify(error.response.data)}`);\r\n        }\r\n        \r\n        toast.error('로그인 처리 중 오류가 발생했습니다');\r\n        \r\n        // 오류 발생 시 토큰 삭제\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n        delete apiClient.defaults.headers.common['Authorization'];\r\n        \r\n        navigate('/login');\r\n      }\r\n    } else if (event.data.type === 'social-login-closing') {\r\n      // 소셜 로그인 팝업이 닫히는 중 (옵션)\r\n      debug(\"소셜 로그인 팝업이 닫히는 중입니다\");\r\n    }\r\n  }, [login, navigate]);\r\n\r\n  // 이벤트 리스너 등록 및 제거\r\n  useEffect(() => {\r\n    debug(\"메시지 이벤트 리스너 등록\");\r\n    window.addEventListener('message', handleMessage);\r\n\r\n    return () => {\r\n      debug(\"메시지 이벤트 리스너 제거\");\r\n      window.removeEventListener('message', handleMessage);\r\n    };\r\n  }, [handleMessage]);\r\n\r\n  return null; // UI 렌더링 없음\r\n};\r\n\r\nexport default SocialLoginHandler;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}